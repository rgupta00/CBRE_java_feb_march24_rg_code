spring boot microservice configuration:Update
____________________________________

=> unserstanding spring boot configuration
=> configure features in spring boot
	value , configprops, Actuator, spring profile, enviornment
=> spring cloud config server
=> dynamic configuration
=> best practices and patterns

=> config features in spring boot
	value 
	configprops
	Actuator
	spring profiles
	environment
=> spring cloud config server

=> Dynamic configuration

spring boot ms configuration goals
__________________________________

	=> externalized
		property file should be externalized for loose coupling
	=> environment specfic
		test, prod, dev, default
	=> consistent
		In microservice we have many spring boot project that must have same configuration parameters, we should manage them centerally (using git) rather than locally
	=> version histroy
	    spring clould provide provision for version history using git
	=> real time management

	=> Dont hard code!

Spring boot profile hello world
__________________________

application.properties
____________________
hello.message=jug delhi
#spring.profiles.active=dev


application-dev.properties

hello.message=jug delhi dev



application.properties

hello.message-test=jug delhi test



@RestController
public class Hello {

	@Value("${hello.message}")
	private String message;
	
	@GetMapping("/")
	public String sayHello() {
		return "hello  "+ message;
	}
}


Running from cmd:
______________
java -jar demo.jar --hello.message="hello to spring boot channed message"


running on differnt port:
_________________________

java -jar  demo.jar --server.port=8050

java -jar -Dspring.profiles.active=prod demo.jar 


Providing default value with @Value annotation , so that config not fail at run time:
_______________________________________________

@RestController
public class Hello {

	@Value("${hello.message: default value}")
	private String message;
	
	@GetMapping("/")
	public String sayHello() {
		return "hello  "+ message;
	}
}


@EnableConfigurationProperties(Config.class)

@ConfigrationProperties(prefix="db")


Using actuator:
______________

Spring Boot Actuator is used to gather metrics using REST endpoints.
1. What is Actuator
2. What is the use of Actuator
3. How to Configure Actuator
4.  Actuator Metrics
5. All REST Endpoints exposed by Actuator
6.  example on all end points like health, beans, cace, configParams, httptrace, mappings, env ...etc

Enable actuator:

management.endpoints.web.exposure.include=*

management.endpoint.health.show-details=always


http://localhost:8080/actuator

https://www.javadevjournal.com/spring-boot/spring-boot-actuator/
https://www.javadevjournal.com/spring-boot/spring-boot-actuator-custom-endpoint/






spring cloud config server?
____________________________

https://medium.com/@ijayakantha/microservices-centralized-configuration-with-spring-cloud-f2a1f7b78cc2

Why spring cloud config server?
_______________________________

	=> in microservice model we have to configure multiple services
	=> externilization and env specific and real time mgt


	M1	---------

	M2	-------		Configuration service		-- git : local
	
	M3	-------



Spring config server + local git configuration:
______________________________________________

dep:config server, actuator
step 1: create local git config

application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/kr_jdbc?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

commit 


step 2: configure config server:
____________________________
spring.application.name=configserver
spring.cloud.config.server.git.uri=/home/raj/Desktop/config
#spring.cloud.config.server.git.clone-on-start=true
server.port=8888
spring.cloud.config.server.git.default-label=master




@EnableConfigServer
@SpringBootApplication
public class ConfigServerApplication {
}


step 3: check endpoint
_________________________

http://localhost:8888/application/default


For remote git uri:
spring.cloud.config.server.git.uri=https://github.com/rgupta00/config_server




Configure config client:
_______________________
dependencies: web, config client, actuator, devtools


configuration client application.properties
__________________________________________

management.endpoints.web.exposure.include=*
spring.config.import=configserver:http://localhost:8888
#spring.application.name=client-app

@RestController
public class Hello {

	@Value("${spring.datasource.url: default value}")
	private String url;
	
	@GetMapping("/")
	public String sayHello() {
		return url;
	}
}



Refreshing properties at run time:
________________________________

	=> we need to register refresh hook to the client
	=> dont forget to enable managment endpoints in client

Step 1:
_______

@RefreshScope
@RestController
public class Hello {

	@Value("${spring.datasource.url: default value}")
	private String url;
	
	@GetMapping("/")
	public String sayHello() {
		return url;
	}
}

step 2: chnage configuration and commit

step 3: in client application use refresh endpoint

http://localhost:8080/actuator/refresh



























