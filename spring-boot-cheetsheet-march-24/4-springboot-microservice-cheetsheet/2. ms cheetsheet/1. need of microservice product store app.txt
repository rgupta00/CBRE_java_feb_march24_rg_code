Microservices Architecture?
_________________________

	=> Microservices architecture allows to avoid monolith application for 
	large system. 

	=> It provide loose coupling between collaborating processes which running
	 independently in different environments with tight cohesion.

Adv MS?	:)
____________

	=> Smaller code base is easy to maintain.
	=> Easy to scale as individual component.
	=> Technology diversity i.e. we can mix libraries, databases, frameworks etc.
	=> Fault isolation i.e. a process failure should not bring whole system down.
	=> Better support for smaller and parallel team.
	=> Independent deployment
	=> Deployment time reduce

Microservices Challenges	:(
______________________

	=> Difficult to achieve strong consistency across services
	=> ACID transactions do not span multiple processes.
	=> Distributed System so hard to debug and trace the issues
	=> Greater need for end to end testing
	=> Required cultural changes in across teams like Dev and Ops

What is Spring Cloud?
___________________
	=> building blocks for Cloud and Microservices
	=> provides microservices infrastructure like provide use services
		 such as Service Discovery, Configuration server and Monitoring.
	=>  provides several other open source projects like Netflix OSS.
	=>  provides PaaS like Cloud Foundry, AWS and Heroku.
	=>  uses Spring Boot style starters


Various modules?
__________________
	=>  Cloud Integration
	=>  Dynamic Reconfiguration
	=>  Service Discovery
	=> Client side Load Balancing 
	......



Service Discovery 
_________________
	How do services find each other?
	What happens if we run multiple instances for a service
	AKA yellow pages*

	Eureka created by Netflix



Client-side Load Balancing
_________________________

	Each service typically deployed as multiple instances for 
	fault tolerance and load sharing. 

	But there is problem how to decide which instance to use?

	How do we decide which service instance to use?

	 Netflix Ribbon, 

	it provide several algorithm for Client-Side Load Balancing. 
	Spring provide smart RestTemplate for service discovery and load balancing by using 		
	@LoadBalanced annotation with RestTemplate instance.




Steps:
__________
	1. Creating Discovery Service (Creating Eureka Discovery Service)

	2. Creating MicroService (the Producer)
	    Register itself with Discovery Service with logical service.

	3. Create Microservice Consumers find Service registered with Discovery Service

	4. Discovery client using a smart RestTemplate to find microservice.




server.port=8080
server.servlet.context-path=/orderapp
spring.application.name=order-service


Product store application : microservice
______________________
coupon	: 8085
customer: 8081
product :8082
order : 8080

class Customer{
	private int id;
	private String name;
	private String email;
}

class Product {
	private int id;
	private String name;
	private double price;
}


 class Coupon {
	private int id;
	private String couponCode;
	private int discountPercentage;
	private Date expiredOn;
}


public class Order {
	private int id;
	private double totalPrice;
	private Date orderDate;
	private Customer customer;
	private Product product;

}

public class OrderRequest {
	private int productId;
	private int customerId;
	private String couponCode;
	private int qty;
}


Product module:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
server.port=8082
server.servlet.context-path=/productapp
spring.application.name=product-service


Dao layer:
____________

@Data
@Entity
@Table(name = "product_table")
@NoArgsConstructor
public class Product {

	@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	private double price;
}

@Repository
public interface ProductRepo extends JpaRepository<Product, Integer>{
}


Service layer:
____________
public interface ProductService {
	public List<Product> getAllProduct();
	public Product addProduct(Product customer);
	public Product getProductById(int id)	
}


@Service
@Transactional
public class ProductServiceImpl implements ProductService {

	@Autowired
	private ProductRepo productRepo;
	
	@Override
	public List<Product> getAllProduct() {
		return productRepo.findAll();
	}

	@Override
	public Product addProduct(Product product) {
		productRepo.save(product);
		return product;
	}

	@Override
	public Product getProductById(int id) {
		return productRepo.findById(id).orElseThrow(ProductNotFoundException::new );
	}

}


public class ProductNotFoundException extends RuntimeException{
}


@RestController
public class ProductController {

	@Autowired
	private ProductService productService;
	
	@GetMapping(path = "product")
	public List<Product> getAll(){
		return productService.getAllProduct();
	}
	
	@GetMapping(path = "product/{id}")
	public Product getAnProduct(@PathVariable(name = "id") int id){
		return productService.getProductById(id);
	}
}


Add 2 product with command line runner:
________________________________________
productService.addProduct(new Product("HP laptop", 60000));
productService.addProduct(new Product("LG TV", 70000));








customer module:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server.port=8081
server.servlet.context-path=/custmerapp
spring.application.name=customer-service




Dao layer :
_____________

@Entity
@Table(name = "cust_table")
@NoArgsConstructor
public class Customer {

	@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	private String email;
}

@Repository
public interface CustomerRepo extends JpaRepository<Customer, Integer>{
}


service layer :
_____________

public interface CustomerService {
	public List<Customer> getAllCustomer();
	public Customer addCustomer(Customer customer);
	public Customer getCustomerById(int id);
}

@Service
@Transactional
public class CustomerServiceImpl implements CustomerService {

	@Autowired
	private CustomerRepo customerRepo;
	
	@Override
	public List<Customer> getAllCustomer() {
		return customerRepo.findAll();
	}

	@Override
	public Customer addCustomer(Customer customer) {
		 customerRepo.save(customer);
		 return customer;
	}

	@Override
	public Customer getCustomerById(int id) {
		return customerRepo.findById(id).orElseThrow(CustomerNotFoundException:: new);
	}

}


public class CustomerNotFoundException extends RuntimeException{
}


controller :
_____________

@RestController
public class CustomerController {
	
	@Autowired
	private CustomerService customerService;
	
	@GetMapping(path = "customer")
	public List<Customer> getAll(){
		return customerService.getAllCustomer();
	}
	
	@GetMapping(path = "customer/{id}")
	public Customer getAnCustomer(@PathVariable(name = "id") int id){
		return customerService.getCustomerById(id);
	}
}


add two customer :
________________
customerService.addCustomer(new Customer("raj", "raj@gmail.com"));
customerService.addCustomer(new Customer("ekta", "ekta@gmail.com"));




Coupon service
~~~~~~~~~~~~~~~~~~~~~~~~

server.port=8085
server.servlet.context-path=/couponapp
spring.application.name=coupon-service


@Data
@Entity
@Table(name = "coupon_table")
@NoArgsConstructor
public class Coupon {
	@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String couponCode;
	private int discountPercentage;
	private Date expiredOn;
}


@Repository
public interface CouponRepo extends JpaRepository<Coupon, Integer> {
	public Coupon findByCouponCode(String couponCode);
}


public interface CouponService {
	public List<Coupon> getAll();
	public Coupon getCouponById(int id);
	public Coupon getCouponByCouponCode(String couponCode);
	public Coupon addCoupon(Coupon coupon);
}

@Service
@Transactional
public class CouponServiceImpl implements CouponService{

	@Autowired
	private CouponRepo couponRepo;
	
	@Override
	public List<Coupon> getAll() {
		return couponRepo.findAll();
	}

	@Override
	public Coupon getCouponById(int id) {
		return couponRepo.findById(id).orElseThrow(CouponNotFoundException:: new);
	}

	@Override
	public Coupon addCoupon(Coupon coupon) {
		couponRepo.save(coupon);
		return coupon;
	}

	@Override
	public Coupon getCouponByCouponCode(String couponCode) {
		return couponRepo.findByCouponCode(couponCode);
	}

}

public class CouponNotFoundException extends RuntimeException{
}



@RestController
public class CouponContoller {
	
	@Autowired
	private CouponService couponService;
	
	@GetMapping(path="coupon")
	public List<Coupon> getAll(){
		return couponService.getAll();
	}
	
	@GetMapping(path="couponbyid/{id}")
	public Coupon getAnCouponById(@PathVariable(name="id") int id){
		return couponService.getCouponById(id);
	}
	
	@GetMapping(path="couponbycode/{couponCode}")
	public Coupon getAnCouponByCode(@PathVariable(name="couponCode") String couponCode){
		return couponService.getCouponByCouponCode(couponCode);
	}
}




order service
~~~~~~~~~~~~~~~~~~~~~~~~

server.port=8080
server.servlet.context-path=/orderapp
spring.application.name=order-service



@Data
@NoArgsConstructor
@AllArgsConstructor
public class Order {
	private int id;
	private double totalPrice;
	private Date orderDate;
	private Customer customer;
	private Product product;

}



@Data
@AllArgsConstructor
@NoArgsConstructor
public class OrderRequest {
	private int cid;
	private int pid;
	private int quantity;
	private String couponCode;
}






@RestController
public class OrderRestController {

	@Autowired
	private RestTemplate restTemplate;
	
	
	@PostMapping(path="order")
	public ResponseEntity<Order> submitOrder(@RequestBody OrderRequest orderRequest){
		
		// call different rest service using rest template

	String couponUrl="http://localhost:8085/coupon/api/coupon/SUP10";
		
		String custUrl="http://localhost:8081/customer/api/customer/"+cid;
		System.out.println(custUrl);
		String productUrl="http://localhost:8082/product/api/product/"+pid;
		System.out.println(productUrl);
		Customer customer = restTemplate.getForObject(custUrl, Customer.class,cid);
		
		Product product = restTemplate.getForObject(productUrl, Product.class,pid);
		
		Coupon coupon=restTemplate.getForObject(couponUrl, Coupon.class);	

		double totalPrice= discountedPrice* orderRequest.getQuantity();
		Order order=new Order();
		order.setId(22);
		order.setCustomer(customer);
		order.setProduct(product);
		order.setTotalPrice(totalPrice);
		order.setOrderDate(new Date());
		return ResponseEntity.status(HttpStatus.CREATED).body(order);
		
	}

}

