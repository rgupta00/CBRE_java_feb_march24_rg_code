Bank application Microservice project step by step
--------------------------------------------------
http://localhost:9090/cards/7788993300

http://localhost:8090/loans/7788993300

http://localhost:8080/accounts/7788993300

http://localhost:8080/accounts
http://localhost:8080/accountinfo/7788993300

http://localhost:8080/accountinfo/7788993300

http://localhost:8070/

Port Numbers for microservice:
------------------------------
account	: 8080
card	:9090
loanId	:8090
configserver: 8071



Step 1: creating card microservice:
---------------------------------
Choose : web,lombok, h2, spring data, actuator

repo layer:
-------------

@Data
@NoArgsConstructor
@Entity
@Table(name = "card")
public class Card {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int cardId;
    private String cardNumber;
    private LocalDate issueDate;
    private int totalLimit;
    private String mobile;

    public Card(String cardNumber, LocalDate issueDate, int totalLimit, String mobile) {
        this.cardNumber = cardNumber;
        this.issueDate = issueDate;
        this.totalLimit = totalLimit;
        this.mobile = mobile;
    }
}


@Repository
public interface CardRepo extends JpaRepository<Card,Integer> {
    Card findByMobile(String mobile);
}


service layer:
-------------
public interface CardService {
   public Card findByMobileNumber(String mobile);
}


@Service
@Transactional
public class CardServiceImpl implements CardService{
    @Autowired
    private CardRepo cardRepo;
    @Override
    public Card findByMobileNumber(String mobile) {
        return cardRepo.findByMobile(mobile);
    }
}

controller layer:
-------------
@RestController
public class CardController {

    @Autowired
    private CardService cardService;

    @GetMapping(path = "cards/{mobile}")
    public Card findByMobileNumber(@PathVariable String mobile){
        return cardService.findByMobileNumber(mobile);
    }
}

logic to insert 2 cards:
------------------------
@SpringBootApplication
public class CardsApplication implements CommandLineRunner {

	@Autowired
	private CardRepo cardRepo;

	public static void main(String[] args) {
		SpringApplication.run(CardsApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		//Card(String cardNumber, LocalDate issueDate, int totalLimit, String mobile)
		cardRepo.save(new Card(getCardNumber(), LocalDate.now(), 10000,"7788993300"));
		cardRepo.save(new Card(getCardNumber(), LocalDate.now(), 20000,"7988223300"));
	}
	private String getCardNumber(){
		long val=new Random().nextLong(1000_0000_0000_000L);
		Long value=1000_0000_0000_0000L+val;
		return value.toString();
	}
}

application.yaml
-------------------
server:
  port: 9090
spring:
  profiles:
    active:
      - qa
  jpa:
    show-sql: true
  application:
    name: cards
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
  info:
    env:
      enabled: true
build:
  version: "1.0"
info:
  message: "Welcome to busycoder card default profile"
  name: "Raj: Product Owner card default profile"

application-prod.yml
---------------------
build:
  version: "2.0"
info:
  message: "Welcome to busycoder card dev profile"
  name: "Ravi: Product Owner card dev profile"
  
application-qa.yml
---------------------
build:
  version: "2.0"
info:
  message: "Welcome to busycoder card qa profile"
  name: "Tarun: Product Owner card  qa profile"







Step 2: creating loan microservice:
---------------------------------
Choose : web,lombok, h2, spring data, actuator

creating repo layer
------------------------

@Data
@NoArgsConstructor
@Entity
@Table(name = "loan_table")
public class Loan {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int loanId;
    private String mobile;
    private String loanNumber;
    private String loanType;
    private int totalLoan;
    private int amountPaid;
    private int outstandingAmount;
}

public interface LoanRepo extends JpaRepository<Loan, Integer> {
    public Loan findByMobile(String mobile);
}


creating server layer
-------------------------

public interface LoanService {
    public Loan findByMobile(String mobile);
}

@Service
@Transactional
public class LoanServiceImpl implements LoanService{

    @Autowired
    private LoanRepo loanRepo;

    @Override
    public Loan findByMobile(String mobile) {
        return loanRepo.findByMobile(mobile);
    }
}


creating controller layer
-------------------------
@RestController
public class LoanController {

    @Autowired
    private LoanService loanService;

    @GetMapping(path = "loans/{mobile}")
    public Loan findByMobile(@PathVariable String mobile){
        return loanService.findByMobile(mobile);
    }

}

creating bootstrap class
---------------------------
@SpringBootApplication
public class LoansApplication implements CommandLineRunner {

	@Autowired
	private LoanRepo loanRepo;

	public static void main(String[] args) {
		SpringApplication.run(LoansApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {

		//public Loan(String mobile, String loanNumber, String loanType, int totalLoan, int amountPaid, int outstandingAmount)
		loanRepo.save(new Loan("7788993300","ASBAS11","house",
				2000,1000,1000));

		loanRepo.save(new Loan("7788223300","AAMS11","education",
				2000,1000,1000));

	}
}

application.yml
-----------------
server:
  port: 8090
spring:
  profiles:
    active:
      - qa
  jpa:
    show-sql: true
  application:
    name: loans
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
  info:
    env:
      enabled: true
build:
  version: "1.0"
info:
  message: "Welcome to busycoder loans default profile"
  name: "Raj: Product Owner loans default profile"


application-prod.yml
----------------------
build:
  version: "2.0"
info:
  message: "Welcome to busycoder loans dev profile"
  name: "Ravi: Product Owner loans dev profile"
  
application-qa.yml
-----------
build:
  version: "2.0"
info:
  message: "Welcome to busycoder loans qa profile"
  name: "Tarun: Product Owner loans  qa profile"
  
  
  
Step 3: creating accounts microservice
------------------------------------
Choose : web,lombok, h2, spring data, actuator


dto: copy other dto from loan and card microservice
------
@Data
@NoArgsConstructor
@AllArgsConstructor
public class AccountInfoDto {
    private Account account;
    private Card cardDto;
    private Loan loanDto;
}

@Data
@NoArgsConstructor
@AllArgsConstructor
@ConfigurationProperties(prefix = "info")
public class AppInfoDto {
    private String message;
    private String name;
}


creating entities
-----------------
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "account_table")
public class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int accId;
    private String name;
    private double balance;
    private String email;
    private String mobile;
	}
	

@Repository
public interface AccountRepo extends JpaRepository<Account, Integer> {
    public Account findByMobile(String mobile);
}

creating service layer
----------------------
public interface AccountService {
    public List<Account> getAll();
    public Account getByMobile(String mobile);
    public AccountInfoDto getAccountDetails(String mobile);
    public String addAccount(Account account);
}


@Service
@Transactional
public class AccountServiceImpl implements AccountService{

    private AccountRepo accountRepo;

    @Autowired
    public AccountServiceImpl(AccountRepo accountRepo) {
        this.accountRepo = accountRepo;
    }

    @Override
    public List<Account> getAll() {
        return accountRepo.findAll();
    }

    @Override
    public Account getByMobile(String mobile) {
        return accountRepo.findByMobile(mobile);
    }

    @Override
    public AccountInfoDto getAccountDetails(String mobile) {
        return null;
    }

    @Override
    public String addAccount(Account account) {
        accountRepo.save(account);
        return "account added successfully";
    }
}


creating proxy service to invoke loan and card microservice
----------------------------------------------------------
apply on bootstrap class
@EnableFeignClients("com.accounts.proxyservice")



@FeignClient(name="card-service", url="http://localhost:9090")
public interface CardServiceProxy {
    @GetMapping(path = "cards/{mobile}")
    public Card findByMobileNumber(@PathVariable String mobile);
}

@FeignClient(name="loan-service", url="http://localhost:8090")
public interface LoanServiceProxy {
    @GetMapping(path = "loans/{mobile}")
    public Loan findByMobile(@PathVariable String mobile);
}





creating controller layer
----------------------

@RestController
@AllArgsConstructor
public class AccountController {
    private final AccountService accountService;
    private final AppInfoDto appInfoDto;

    private final CardServiceProxy cardServiceProxy;
    private final LoanServiceProxy loanServiceProxy;

    @GetMapping("appInfo")
    public AppInfoDto appInfo(){
        return   appInfoDto;
    }

    @GetMapping("accounts")
    public List<Account> getAll(){
        return   accountService.getAll();
    }

    @GetMapping("accounts/{mobile}")
    public Account getByMobile(@PathVariable  String mobile){
      return   accountService.getByMobile(mobile);
    }
	
    @GetMapping("accountinfo/{mobile}")
    public AccountInfoDto getAccountDetails(@PathVariable String mobile){
        AccountInfoDto accountInfoDto=new AccountInfoDto();
        accountInfoDto.setAccount(accountService.getByMobile(mobile));
        accountInfoDto.setCardDto(cardServiceProxy.findByMobileNumber(mobile));
        accountInfoDto.setLoanDto(loanServiceProxy.findByMobile(mobile));

        return accountInfoDto;
    }
    @PostMapping(path = "accounts")
    public String addAccount(@RequestBody Account account){
        return accountService.addAccount(account);
    }
}

bootstrap class
-----------------
@EnableConfigurationProperties(AppInfoDto.class)
@SpringBootApplication
public class AccountsApplication implements CommandLineRunner {

	@Autowired
	private AccountService accountService;

	public static void main(String[] args) {
		SpringApplication.run(AccountsApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {

		accountService.addAccount(new Account("raj",1000,"raj@gmail.com",
				"7788993300"));

		accountService.addAccount(new Account("ekta",1000,"ekta@gmail.com",
				"7788223300"));

	}
}


step 4: create config server:
--------------------------
Choose : lombok,config server,actuator

apply 
-----
@EnableConfigServer to the bootstrap class

application.yml
----------------
server:
  port: 8071
spring:
  application:
    name: configserver
  cloud:
    config:
      server:
        git:
          uri: file:///C:/configfiles
          clone-on-start: true
          default-label: master


now try:
---------
http://localhost:8071/accounts/default
http://localhost:8071/loans/default
http://localhost:8071/cards/default



Step 5: read property files from config server
-----------------------------------------------
1. change in every project add: config client dependency

2. now add configuration
spring:
  config:
    import: optional:configserver:http://localhost:8071
	
http://localhost:8080/appInfo

3. what if config property changes?

@RefreshScope on top of the restcontroller

in client application use refresh endpoint

http://localhost:8080/actuator/refresh







Step 6: Configure eureka server:
-------------------------------
create new project with: eureka server, config client, actuator

1. apply annotation on bootstrap class
@EnableEurekaServer

2. url pattern
http://localhost:8070/

3. application.yml configuration for eureka server
--------------------------
server:
  port: 8070
eureka:
  instance:
    hostname: localhost
  client:
    fetch-registry: false
    register-with-eureka: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

spring:
  application:
    name: "eurekaserver"
  config:
    import: "optional:configserver:http://localhost:8071/"
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true


4. configure eureka client in all  the projects accounts, cards and loans
--------------------------------------------------------------------------
 add eureka client dep to all projects
 
 eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8070/eureka/
	  

5. now check all service must be registed with eureka server

6. now replace hard coded url in Openfeign service to logical names and run the examples
	give logical name of service 
@FeignClient("loans")


step 7.Configure resilence 4j to accounts application
-----------------------------------------------
1. add resilience4j, aop, actuator



Resilence 4j
-----------
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      accountInfoService:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
  retry:
    instances:
      accountInfoService:
        max-attempts: 5
        wait-duration: 20s




resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1
	  
	  
	  


spring:
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
		
resilience4j:
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-type: count_based
        sliding-window-size: 10

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 5s
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 5s
      limitRefreshPeriod: 5s
      limitForPeriod: 1