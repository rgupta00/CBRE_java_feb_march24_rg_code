

RestTemplate tutorial:
______________________
	=> RestTemplate is used to communication bw different spring boot application
	=> key for microservice project development

	=> Microservices communication is possible using RestTemplate
	=> RestTemplate various method to intract bw diff microservices
		=> methods:
			xxxForObject()-getForObject(), postForObject(), getForEntity(), postForEntity()
			xxxForEntity()
			exchange()-calling Http POST/PUT/DELETE endpoint 

	=> How to add base URL in RestTemplate
	=> How to Add timout in RestTemplate
	=> How to add interceptor in RestTemplate for centralized logging of request and response


Example:
________
Refer product application


getForObject method:
==================

getting an object :
____________________
Product product=restTemplate.getForObject("http://localhost:8082/productapp/products/2", Product.class);

getting an Product by id :
_________________________

String productById="http://localhost:8082/productapp/products/{id}";
Map<String, String> prop=new HashMap<>();
prop.put("id", id);
Product product=restTemplate.getForObject(productById,Product.class, prop);
	

getting an object as string:
____________________________
String productString=restTemplate.getForObject("http://localhost:8082/productapp/products/2", String.class);


getting all products:
________________
List products = restTemplate.getForObject("http://localhost:8082/productapp/products", List.class);



adding new product:
_______________________
Product productAdded=restTemplate.postForObject("http://localhost:8082/productapp/products",product, Product.class);




xxxForEntity()-calling Http POST/PUT/DELETE endpoint 
_____________________________________


getList:
_________
ResponseEntity<List> productEntity = 
				restTemplate
				.getForEntity("http://localhost:8082/productapp/products",List.class);
	
		System.out.println(productEntity.getStatusCodeValue());
		System.out.println(productEntity.getHeaders());
		return productEntity.getBody();


 getSingleObject
_________________
	Map<String, String> prop=new HashMap<>();
		
		prop.put("id", id);
		ResponseEntity<Product> productEntity = restTemplate
				.getForEntity("http://localhost:8082/productapp/products/{id}",
				Product.class, prop);
		return productEntity.getBody();


 postForEntity:
 ______________
	ResponseEntity<Product> productEntity = restTemplate
			.postForEntity("http://localhost:8082/productapp/products",
				product, Product.class);
		return productEntity.getBody();

  
deleteProduct: delete
_________

  	Map<String, String> uriVariables = new HashMap<>();
	uriVariables.put("id", id);

	restTemplate.delete("http://localhost:8082/productapp/products/{id}", uriVariables);

updateProduct
___________

  	Map<String, String> uriVariables = new HashMap<>();
	uriVariables.put("id", id);

        restTemplate.put("http://localhost:8082/productapp/products/{id}", product, uriVariables);
       	System.out.println("updated....");

Feign
___________
=> The Feign is a declarative web service (HTTP client) developed by Netflix. 
Its aim is to simplify the HTTP API clients. It is a Java to HTTP client binder. 
If you want to use Feign, create an interface, and annotate it. 


=> It is a library for creating REST API clients. It makes web service clients easier. 
The developers can use declarative annotations to call the REST
 services instead of writing representative boilerplate code.

=> Spring Cloud OpenFeign provides OpenFeign integrations for Spring Boot 
apps through auto-configuration and binding to the Spring Environment. 
Without Feign, in Spring Boot application, we use RestTemplate to call the User service.
 To use the Feign, we need to add spring-cloud-starter-openfeign dependency in the pom.xml file.


Step 1:
put openfeign dependency

step 2: Apply @EnableFeignClients to bootstrap class

@EnableFeignClients("com.product.model.service")
@SpringBootApplication
public class ProductApplication  {

step 3: create ProductServiceProxy

@FeignClient(name="product-service", url="http://localhost:8082/productapp")  
public interface ProductServiceProxy {
	@GetMapping(path = "products")
	public ResponseEntity<List<Product>> findAll();
	
	@GetMapping(path = "products/{id}")
	public ResponseEntity<Product> findById(@PathVariable(name = "id") int id);
	
	@PostMapping(path = "products")
	public ResponseEntity<Product> addProduct( @RequestBody Product product);
	
	@DeleteMapping(path = "products/{id}")
	public ResponseEntity<Void> deleteProduct(@PathVariable(name = "id") int id);
	
	@PutMapping(path = "products/{id}")
	public ResponseEntity<Product> updateProduct
	(@PathVariable(name = "id") int id, @RequestBody Product product);
	
}


step 4: use ProductServiceProxy

@RestController
public class ProductClientController {

	@Autowired
	private ProductServiceProxy productServiceProxy;
	
	@GetMapping(path = "products")
	public ResponseEntity<List<Product>> getAll() {
		return productServiceProxy.findAll();
	}

	@GetMapping(path = "products/{id}")
	public ResponseEntity<Product> getById(@PathVariable(name = "id") int id) {
		return productServiceProxy.findById(id);
	}

	@PostMapping(path = "products")
	public ResponseEntity<Product> addProduct(@RequestBody Product product) {
		return productServiceProxy.addProduct(product);
	}

	@DeleteMapping(path = "products/{id}")
	public ResponseEntity<Void> deleteProduct(@PathVariable(name = "id") int id) {
		return productServiceProxy.deleteProduct(id);
	}


}



step 5: in case of eureka server: no need to provide url :)

@FeignClient(name="product-service")


