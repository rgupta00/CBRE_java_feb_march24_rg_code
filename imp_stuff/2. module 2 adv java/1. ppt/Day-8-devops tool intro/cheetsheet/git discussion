git commands practice
===================
0. Introduction
1. basics commands
2. git log 
3. git diff command
4. git rm command
5. undo changes using git checkout command
6. git reference (master and head)
7. git reset
8. git ignore
9. git branching and commands
10. merging and conflict
11. deleting branches
12. rebashing
13. git slash
14. git remote commands
15. git taging


What is git? git vs github?
--------------------------



1. basics commands
---------------------
git status
	fatal: not a git repository (or any of the parent directories): .git
 c

git init
	Initialized empty Git repository in /home/raj/Desktop/gitdemo/project1/.git/

git status
	On branch master
	No commits yet
	nothing to commit (create/copy files and use "git add" to track)

cat >file1
this is file 1
cat >file2
this is file 2

git status
	On branch master	
	No commits yet

	Untracked files:
	file1, file2


git add file1, file2

git status
	On branch master
	No commits yet

	Changes to be committed:
	new file:   file1
	new file:   file2


git commit -m "first commit"

	*** Please tell me who you are.

	Run
 		 git config --global user.email "you@example.com"
 		 git config --global user.name "Your Name"

		to set your account's default identity.


git config --global user.email "rgupta.mtech@gmail.com"
git config --global user.name "rgupta00"

git commit -m "first commit"
	[master (root-commit) bf0acc9] first commit
 		2 files changed, 2 insertions(+)
 		create mode 100644 file1
 		create mode 100644 file2

git status
	On branch master
	nothing to commit, working tree clean


Now update file1:
-------------
cat >> file1
this is some update to file1

git status

	On branch master
	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)
		
		modified:   file1
	no changes added to commit (use "git add" and/or "git commit -a")

git add .

git commit -m "some changes to file1"








2. git log : get log information:
---------------------------------

	=> git log command is used to see history of all commits in local repository
		most commonly command

git log . 		=> getting all log information
git log file1		=> only commit related to file1
git log --oneline	=> oneline message, useful to identity commit based on messages


git log
-------
	commit 0a82246afbfba89105ffa95a0b2cc65ccfc0010c (HEAD -> master)
	Author: rgupta00 <rgupta.mtech@gmail.com>
	Date:   Thu Aug 6 11:59:07 2020 +0530

    	some changes to file1

	commit bf0acc933722c9740521ed2dc98c9c899365dc99
	Author: rgupta00 <rgupta.mtech@gmail.com>
	Date:   Thu Aug 6 11:56:59 2020 +0530

   	 first commit


git ls-files
------------
file1
file2

git log file1
-------------
	commit 0a82246afbfba89105ffa95a0b2cc65ccfc0010c (HEAD -> master)
	Author: rgupta00 <rgupta.mtech@gmail.com>
	Date:   Thu Aug 6 11:59:07 2020 +0530

  	  some changes to file1

	commit bf0acc933722c9740521ed2dc98c9c899365dc99
	Author: rgupta00 <rgupta.mtech@gmail.com>
	Date:   Thu Aug 6 11:56:59 2020 +0530

   	 first commit


git log --oneline	: handy command to see oneline log messaege
-----------------		show first seven char of commit id

	0a82246 (HEAD -> master) some changes to file1
	bf0acc9 first commit



git log -n 2	: get log for latest first two commit 
-------------
commit 0a82246afbfba89105ffa95a0b2cc65ccfc0010c (HEAD -> master)
Author: rgupta00 <rgupta.mtech@gmail.com>
Date:   Thu Aug 6 11:59:07 2020 +0530

    some changes to file1

commit bf0acc933722c9740521ed2dc98c9c899365dc99
Author: rgupta00 <rgupta.mtech@gmail.com>
Date:   Thu Aug 6 11:56:59 2020 +0530

    first commit



git log --grep "firstr" --oneline

git log --since="5 min ago"

git log --author =rgupta00 --oneline

git log --max-count=3




3. git diff command
--------------------
	=> lets say afte commiting 
	we change file in working directory then content of staging area will be different 
	from local repository 
	=> we want to see the difference bw working directory and staging area
	=> git diff command


	git diff file1
	Will give diff bw working dir and staging area




diff --git a/file1 b/file1
index 6564281..171840f 100644
--- a/file1
+++ b/file1
@@ -2,3 +2,4 @@ this is file 1
 this is some update to file1
 this is added to file1
 another line is added to file1
+this is another line


diff --git a/file1 b/file1:
-------------------------
	a/file1: source copy ie staging area
	 b/file1: destination copy ie working copy

		staging area ----> working copy
 

index 6564281..171840f 100644
-------------------------
	6564281: hashcode of soruce file 
	171840f: hashcode of destination file
	100644: GIT file mode
	100: first 3 digits, represent type of file,ASCII text file
	644: next 3 digits rep file permission
	644-> rw-r--r--

--- a/file1
-----------
	---- a/file1 is missing some lines ( staging area) 

+++ b/file1
-----------
	+++ b/file1 is having some extra data (working dir) 




@@ -2,3 +2,4 @@ this is file 1
-----------------------------
 this is some update to file1
 this is added to file1
 another line is added to file1
+this is another line
	=> if any line prefixed with space it is unchanged
	if any line is prefixed with + then it is added in destination copy

	if any line is prefixed with - then it is removed in destination copy


4. git rm command:
------------------
	git rm file1.txt => it will remove file from both working and staging area

	git rm --cached file1.txt => it will remove file only from and staging area
					and not from working dir

	rm file1.txt => it will remove file from only from working area not from staging area


	as files are alread in local repo can revert back!
	We can only restore commited files
	
	commit operation is requried even in case of removing files, if files is alread tracked
	by git.




5. undo changes using git checkout command
------------------------------------------

	git checkout command?
	
	something line undo operation

	purpose: we can use checkout command to ignore/discard unstaged changes 
	(not added to staging area) in the tracked files of working directory.































