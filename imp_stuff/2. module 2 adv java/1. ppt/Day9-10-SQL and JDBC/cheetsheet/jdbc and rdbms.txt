Day 11: topic: RDBMS and jdbc
-------------------------------
rdbms with postgress
basics sql practice
jdbc database connectivity

example and application


CRUD:
______
precision

create table emp(id serial primary key, name varchar(100) not null, salary double not null );
select * from emp;

insert into emp(name, salary) values('raj',80000);
insert into emp(name, salary) values('ekta',97000);
insert into emp(name, salary) values('gunika',77000);

select * from emp where name ='raj' or name ='ekta';

update emp set salary=90000 where id=1;

delete from emp where id=3;
select * from emp;

select count(*) from emp;


show the table stru: no desc table :(
_______________________
SELECT *
FROM information_schema.columns
WHERE table_name = 'emp';



sql constraints:
________________
check 
uniqe
pk

create table emp2(id serial primary key, 
				  name varchar(60) not null,
				  email varchar(100) not null unique,
				  salary double precision not null check(salary>=60000) );
insert into emp2(name, email, salary) values('raj','raj@gmail.com',50000);




create table emp2(id serial primary key, 
				  name varchar(60) not null,
				  email varchar(100) not null unique,
				  salary double precision not null check(salary>=60000) );
insert into emp2(name, email, salary) values('raj','raj@gmail.com',61000);
insert into emp2(name, email, salary) values('ekta','raj@gmail.com',71000);


Alter command:
___________
alter table emp2 alter column name type varchar(100);



some basic quaries:
----------------------

select * from emp;

select * from emp where name like 'ra%'

select id as empid from emp;



select, from ,where ,group by ,having
--------------------------------------

create table emp3
(id serial primary key, 
 name varchar(60) not null, 
 salary double precision not null,
 city varchar(100) not null);
 
insert into emp3(name, salary, city) values('raj',61000,'noida');
insert into emp3(name, salary, city) values('ekta',71000,'noida');

insert into emp3(name, salary, city) values('anil',67000,'delhi');
insert into emp3(name, salary, city) values('rakhi',71000,'delhi');

insert into emp3(name, salary, city) values('foo',61000,'chennai');
insert into emp3(name, salary, city) values('bar',71000,'chennai');
select * from emp3;

select city, max(salary)
from emp3 
group by city;


joins: PK and FK constrants
__________

 1		N
dept ---<>----- emp


create table dept(did serial primary key, dname varchar(100));

create table emps
		(eid serial primary key, 
		name varchar(60) not null,
		salary double precision not null ,
		did_fk int not null,
		constraint fk_emps_dept foreign key(did_fk) references dept(did) );
		
		
		
insert into dept(dname) values(2,'SALES');
insert into dept(dname) values(3,'MKT');

insert into emps(name, salary, did_fk) values(1,'bar',71000,1);
insert into emps(name, salary, did_fk) values(2,'foo',62000,1);
insert into emps(name, salary, did_fk) values(3,'ravi',81000,1);
insert into emps(name, salary, did_fk) values(4,'kapil',92000,1);

select * from emps;
insert into emps(name, salary, did_fk) values(6,'seema',71000,2);
insert into emps(name, salary, did_fk) values(7,'binny',62000,2);
insert into emps(name, salary, did_fk) values(8,'umesh',81000,2);
insert into emps(name, salary, did_fk) values(9,'gunika',92000,2);	
		




create table dept(did int primary key, dname varchar(100));

create table emps
		(eid int primary key, 
		name varchar(60) not null,
		salary double precision not null ,
		did_fk int not null,
		constraint fk_emps_dept foreign key(did_fk) references dept(did) );

insert into dept(did, dname) values(2,'SALES');
insert into dept(did, dname) values(3,'MKT');

insert into emps(eid, name, salary, did_fk) values(1,'bar',71000,1);
insert into emps(eid, name, salary, did_fk) values(2,'foo',62000,1);
insert into emps(eid, name, salary, did_fk) values(3,'ravi',81000,1);
insert into emps(eid, name, salary, did_fk) values(4,'kapil',92000,1);

select * from emps;
insert into emps(eid, name, salary, did_fk) values(6,'seema',71000,2);
insert into emps(eid, name, salary, did_fk) values(7,'binny',62000,2);
insert into emps(eid, name, salary, did_fk) values(8,'umesh',81000,2);
insert into emps(eid, name, salary, did_fk) values(9,'gunika',92000,2);

select * from emps;

select * from dept;

joins:
--------
outer join
	left
	right
equi join
cross join

inner join
--------------
		dept					emp
		IT					......
		
		SALES					....

		MKT( X)

		select * from emps e inner join dept d on e.did_fk=d.did;

left outer join
--------------
		dept					emp
		IT					......
		
		SALES					....

		MKT( X)

		select * from emps e left join dept d on e.did_fk=d.did;


right outer join
--------------
		dept					emp
		IT					......
		
		SALES					....

		MKT( X)

		select * from emps e right join dept d on e.did_fk=d.did;




?

	pgadmin		<----------------> postgress
	it is
	not a db server

	compass   <----------------------> mongodb


	workbench <-----------------> mysql



emp
-------
id
name 
salary


customer
-------
id
name
email
phone



Hello world jdbc:
--------------
Attept one:
-----------------


step 1: create gradle project on sts , put dependency for postgres, refresh
-------
implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.5'


setp 2: 
create table emp as discussed

create table emp(id serial primary key, name varchar(60) not null, salary double precision not null );
select * from emp;

insert into emp(name, salary) values('raj',80000);
insert into emp(name, salary) values('ekta',97000);
insert into emp(name, salary) values('gunika',77000);

insert some records

step 3: Write a program to show all the records from the databse

import java.sql.*;

public class HelloJdbc {

	public static void main(String[] args) {
		// getting all records from the database

		// 1. you have to load the driver: dynamically ?
		try {
			Class.forName("org.postgresql.Driver");
			System.out.println("------------");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		// 2. you need to get a jdbc connection

		try (Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/krbatch1",
				"postgres", "raj123")) {

			// get the data vs change the database state
			Statement stmt = connection.createStatement();
			// executeQuery vs executeUpdate
			ResultSet rs = stmt.executeQuery("select * from emp");

			while (rs.next()) {
				System.out.println(rs.getInt(1) + ": " + rs.getString(2) + ": " + rs.getDouble(3));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		// 3. we need to get something that is Statement --> resultset --> we fetch the
		// rec --> till not finished

		// 4. we close the conn

	}

}




Attept Two:
-----------------
	Attept one: problems
	1. hard coded connection details what happen if i need to migrate to some other databse
	2. we use properity file and then we crate our own connection (String can create for your :) )



step 1:
	first create a prop file

db.properties

jdbc.driver=org.postgresql.Driver
jdbc.url=jdbc:postgresql://localhost:5432/krbatch1
jdbc.username=postgres
jdbc.password=raj123

DONT FORGET TO CHANGE DETAILS AS PER YOUR CONFIGURATION


step 2:
create a connection factory (aka factory design pattern from GOF)
-------------------------------------------------------------------

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class ConnectionFactory {
	private static Connection connection = null;

	public static Connection getConnection() {

		// read the prop file and make token of key and value
		// and then use the key to get the value
		InputStream inputStream = null;
		Properties properties = null;
		try {
			inputStream = new FileInputStream("application.properties");
			properties = new Properties();
			properties.load(inputStream);// if we use string token... we have to write code ourself :)
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		String driver= properties.getProperty("jdbc.driver");
		String url= properties.getProperty("jdbc.url");
		String username= properties.getProperty("jdbc.username");
		String password= properties.getProperty("jdbc.password");
		
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

		try {
			connection = DriverManager
					.getConnection(url,username, password);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return connection;
	}
}


Step 3: Write hello world using connection factory
	now we can see code is much simplify
---------------------------------------------
	

import java.sql.*;

public class HelloJdbc {

	public static void main(String[] args) {
	
		try {
			Connection connection = ConnectionFactory.getConnection();

			Statement stmt = connection.createStatement();

			ResultSet rs = stmt.executeQuery("select * from emp");

			while (rs.next()) {
				System.out.println(rs.getInt(1) + ": " + rs.getString(2) + ": " + rs.getDouble(3));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

}



// Statement	vs PreparedStatement  vs		CallableStatement

Statement: 	simple way to get/udpate the data
		it is having problem of sql injection
		performace is bad

Statement
 |
PreparedStatement:
	it dont have problem of sql injection
	the quaries would be faster


PreparedStatement
  |
CallableStatement
	it used to call store procedure *




// executeUpdate vs executeQuery
-----------------------------
executeUpdate: it is used to change the state of the databse
		and it dont return u rs
		it return u no of rows effectted


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

//used to insert an emplyees inforamtion
public class InsertEmployee {
	
	public static void main(String[] args) {
		
		//SQL injection ?
		
		// Statement	vs PreparedStatement  vs		CallableStatement
		try {
			Connection connection=ConnectionFactory.getConnection();
			PreparedStatement pstmt=connection
					.prepareStatement("insert into emp(name, salary) values(?,?)");
			pstmt.setString(1, "neeta");
			pstmt.setDouble(2, 56000);
			
			int noOfRows= pstmt.executeUpdate();// executeUpdate vs executeQuery
			
			System.out.println(noOfRows);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}

















