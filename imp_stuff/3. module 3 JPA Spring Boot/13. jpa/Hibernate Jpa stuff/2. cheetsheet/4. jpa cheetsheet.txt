

Hibernate with jpa:
----------------

    <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>5.4.9.Final</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.16</version>
        </dependency>







@Table(name = "mycustomizedperson")
@Entity(name="people")
public class Person {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "person_id")
    private Long id;

    @Column(name = "first", length = 50)
    private String firstName;
    private String lastName;

    @Column(unique = true, length = 250)
    private String email;

    @Temporal(TemporalType.DATE)
    private Date birthDate;

    private LocalDate boa;

    @Transient
    private int temp;




Main:
---------

       EntityManagerFactory factory = Persistence.createEntityManagerFactory("demo");
        EntityManager em = factory.createEntityManager();
        EntityTransaction transaction = em.getTransaction();

        transaction.begin();
        Person p = new Person("raj", "gupta", "rgupta@gmail.com", new Date(), LocalDate.of(2019, 01, 01));
        em.persist(p);

        em.createQuery("from people");
        em.createNativeQuery("select * from mycustomizedperson");
        transaction.commit();
        em.close();





joins
-------

@Entity
public abstract class Account {
	@Id
	@GeneratedValue
	private Long number;
	private double balance;

	public Account(double balance) {
		this.balance = balance;
	}
}


@DiscriminatorValue("checking")
public class CheckingAccount extends Account {
	private Double overdraftLimit;

	public CheckingAccount(double balance, Double overdraftLimit) {
		super(balance);
		this.overdraftLimit = overdraftLimit;
	}
}

@DiscriminatorValue("savings")
public class SavingsAccount extends Account {
	private Double APY;

    public SavingsAccount(double balance, Double APY) {
        super(balance);
        this.APY = APY;
    }
}



@Entity
@NamedQueries({
   @NamedQuery(name="Person.everyone", query = "from Person")
})
public class Person {
    @Id
    @GeneratedValue
    private Long id;
    private String firstName;
    private String lastName;
//    private String id;

    @ManyToOne(cascade = CascadeType.PERSIST)
    private Address address;

    @OneToMany(cascade = CascadeType.ALL)
    @JoinColumn(name = "person_id")
    private List<PhoneNumber> numbers = new ArrayList<>();

    public Person(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public void addPhonenumber(PhoneNumber phoneNumber) {
        numbers.add(phoneNumber);
    }

}

@Entity
public class PhoneNumber {
    @Id
    @GeneratedValue
    private Long id;
    private String number;
    private String type;

    public PhoneNumber(String number, String type) {
        this.number = number;
        this.type = type;
    }
}


@Entity
public class Address {
    @Id
    @GeneratedValue
    private Long id;
    private String street;
    private String city;
    private String state;
    private String zip;

    public Address(String street, String city, String state, String zip) {
        this.street = street;
        this.city = city;
        this.state = state;
        this.zip = zip;
    }
}




Quaries examples:
----------------
	gettting all persons:
	---------------------

        TypedQuery<Person> query = em.createQuery("from Person", Person.class);
        List<Person> personList = query.getResultList();


	Using named quaries:
	------------------
	 TypedQuery<Person> query = em.createNamedQuery("Person.everyone", Person.class);
        List<Person> personList = query.getResultList();


	 polymorphicQuery
	------------------
	 TypedQuery<Account> query = em.createQuery("from Account", Account.class);
        List<Account> accounts = query.getResultList();

	aliasesQuery
	-----------
	 TypedQuery<Person> query = em.createQuery("from Person as p where p.id = 1", Person.class);


	pagination
	---------
	
        TypedQuery<Person> query = em.createQuery("from Person", Person.class);
        query.setFirstResult(7);
        query.setMaxResults(5);
        List<Person> people = query.getResultList();
        System.out.println(people.size());

	orderBy
	-------
	TypedQuery<Person> query = em.createQuery("from Person p order by p.lastName desc", Person.class);
        List<Person> personList = query.getResultList();

	whereClause
	---------
	TypedQuery<Person> query = em.createQuery("from Person p where p.lastName like '%n%'", Person.class);
        List<Person> personList = query.getResultList();


	queryParameters
	-------------
	//NOT Good
        TypedQuery<Person> query = 
			em.createQuery("from Person p where p.firstName = '"+firstName+"'", Person.class);



        1. Named Parameters
     		 TypedQuery<Person> query = em.createQuery("from Person p where p.firstName = :first", Person.class);
       	 	   query.setParameter("first", firstName);

        2. position
        TypedQuery<Person> query =
		 em.createQuery("from Person p where p.lastName = ?1 and  p.firstName = ?0", Person.class);
        query.setParameter(0, "raj");
        query.setParameter(1, "gupta");

        List<Person> personList = query.getResultList();


	singleResult
	------------
	 TypedQuery<Person> query = em.createQuery("from Person p where p.id = 123", Person.class);
//        Person p = query.getSingleResult();
//        System.out.println(p);
        query.setMaxResults(1);
        List<Person> p = query.getResultList();
        System.out.println(p.size());
//        System.out.println(p.get(0));




	specialAttributeId
	------------------

	Consider:
	-------
	public class Person {
   		@Id
  		@GeneratedValue
    		private Long personId;
	}



	  TypedQuery<Person> query = em.createQuery("from Person p where p.id = 1", Person.class);

        List<Person> p = query.getResultList();



	join
	-------

       1. implicit join
       TypedQuery<Person> query = em.createQuery("from Person p where p.address.state = 'delhi'", Person.class);

        2. explicit join
        TypedQuery<Person> query = 
		em.createQuery("select p from Person p join p.address addr where addr.state = 'delhi'", Person.class);

        List<Person> p = query.getResultList();
        

	Join 1 to many:
	--------------
	  1			1
	Person--------<>--------Phone

        TypedQuery<Object[]> query = 
		em.createQuery("from Person p join p.numbers n where n.number like '641%'", Object[].class);
      		 List<Object[]> list = query.getResultList();
       		 for(Object[] obj : list){
         			  System.out.println((Person)obj[0]);
          		 System.out.println((PhoneNumber)obj[1]);
      	 }

     use select clause
     --------------
        TypedQuery<Person> query2 = 
	em.createQuery("select p from Person p join p.numbers n where n.number like '641%'", Person.class);
        List<Person> personList = query2.getResultList();


     use DISTINCT keyword
     ---------------------
        TypedQuery<Person> query2 = 
	em.createQuery("select distinct p from Person p join p.numbers n where n.number like '641%'", Person.class);
        List<Person> personList = query2.getResultList();
        System.out.println(personList);

    joinFetch
     ----------
        TypedQuery<Person> query2 = 
		em.createQuery("from Person p join fetch p.numbers n where n.number like '641%'", Person.class);
        List<Person> personList = query2.getResultList();



    hibernate performace:
    -----------------------
hibernate Optimization - N+1 Solutions Intro:
=============================================
Dynamic solution:
-------------
	Entity graph (jpa 2.1)	left outer join
	join fetch : inner join

static solution:
--------------
	@BatchSize		: convert N+1 problem to N/batchsize	+1 problem
	@Fetch(subselect)	N+1 to 1+1	subselect

	@LazyCollection(LazyCollection.EXTRA)

	class Dept{
		@OneToMany
		@JoinColumn
		@LazyCollection(LazyCollection.EXTRA)
		List<Emp> emp=new AL<>();

	}

		dept
		dept.getEmps().size()

consider example:
----------------
	1				1
	customer ------------------	Address
	 |
	 |				N
	  -------------------------   Book
	 |				
	 |				N
	  ------------------------   Movie
         |
         |				1
	N  -------------------------   SalesRep



@Entity
public class Customer {
    @Id
    @GeneratedValue
    private Long id;
    private String firstName;
    private String lastName;

    @OneToOne(cascade = CascadeType.ALL)
    private Address address;

    @OneToMany(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    @OneToMany(cascade = CascadeType.PERSIST)
    @JoinColumn
    @LazyCollection(LazyCollectionOption.EXTRA)
    private List<Book> books = new ArrayList<>();

    @OneToMany(cascade = CascadeType.ALL)
    @JoinColumn
    private List<Movie> movies = new ArrayList<>();

    @ManyToOne(cascade = CascadeType.ALL)
    private SalesRep salesRep;
}


@Entity
public class Address {
    @Id
    @GeneratedValue
    private Long id;
    private String city;
    private String state;
}



@Entity
public class Author {
    @Id
    @GeneratedValue
    private Long id;
    private String name;

    public Author(String name) {
        this.name = name;
    }

}


@Entity
public class Book {
    @Id
    @GeneratedValue
    private Long id;
    private String name;

    @OneToOne(cascade = CascadeType.ALL)
    private Author author;
}


@Entity
public class Movie {
    @Id
    @GeneratedValue
    private Long id;
    private String name;

    public Movie(String name) {

        this.name = name;
    }

}

@Entity
public class SalesRep {
    @Id
    @GeneratedValue
    private Long id;
    private String name;

    @OneToMany(mappedBy = "salesRep", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
//    @BatchSize(size = 3)
    @Fetch(FetchMode.SUBSELECT)
    private List<Customer> customers = new ArrayList<>();

    @OneToOne(cascade = CascadeType.ALL)
    private Address address;
}


lazyorEager
-----------

TypedQuery<Customer> query = em.createQuery("from Customer", Customer.class);

List<Customer> customers = query.getResultList();

 for (Customer c : customers) {
    System.out.println(c.getAddress());
    System.out.println(c.getBooks().size());// we just want to print no of books
					    //@LazyCollection(LazyCollectionOption.EXTRA)
    }

class A{

	private List<B> bs=....
	private List<c> bs=....
	
}

cartesianProduct_BAD
--------------------
	TypedQuery<Object[]> query = em.createQuery("from Customer c left join c.books left join c.movies", 			Object[].class);
        query.getResultList();

nPlusOneProblem
----------------
  TypedQuery<SalesRep> query = em.createQuery("from SalesRep", SalesRep.class);
    List<SalesRep> list = query.getResultList();

entityGraphAndJoinFetch
-----------------------
      1. Use entity graph
	----------------------
       TypedQuery<Customer> query = em.createQuery("from Customer", Customer.class);
       EntityGraph<Customer> entityGraph = em.createEntityGraph(Customer.class);
       entityGraph.addAttributeNodes("address");
       entityGraph.addSubgraph("books").addAttributeNodes("author");
       query.setHint("javax.persistence.fetchgraph", entityGraph);


	2. Join Fecth
	----------------
        TypedQuery<Customer> query = 
	em.createQuery("from Customer c join fetch c.address join fetch c.books b join fetch b.author", Customer.class);

	batchSizeORsubselect
	--------------------








