

===============================
spring boot jsp security
===============================

spring boot jsp crud:
-----------------------

spring boot Rest
=================

step 1: choose dependencies: devTools, actutator, jpa, mysql, web, security

put extra dependencies for jsp:
----------------------------


		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>






step 2: paste in application.properties file
--------------------------------------------

server.servlet.context-path=/empapp
server.port=8080

spring.datasource.url=jdbc:mysql://localhost:3306/kr_jdbc?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=create
logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true

spring.mvc.view.prefix:/WEB-INF/views/
spring.mvc.view.suffix:.jsp



step 3: create domain
---------------------
@Entity
@Table(name="emp_table")
public class Employee {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	private String name;
	private int age;
}


@Repository
public interface EmpRepo extends CrudRepository<Employee, Integer>{

}




step 4: create service
---------------------

public interface EmployeeService {
	public List<Employee> getAll();
	public Employee getEmployeeById(int id);
	public Employee save(Employee emp);
	public Employee delete(int empId);
	public Employee update(int empId, Employee emp);
}



@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	private EmpRepo empRepo;
	
	@Override
	public List<Employee> getAll() {
		return (List<Employee>) empRepo.findAll();
	}

	@Override
	public Employee getEmployeeById(int id) {
		return empRepo.findById(id).orElseThrow(EmployeeNotFoundException:: new);
	}

	@Override
	public Employee save(Employee emp) {
		return empRepo.save(emp);
	}

	@Override
	public Employee delete(int empId) {
		Employee employeeToDelete=getEmployeeById(empId);
		empRepo.delete(employeeToDelete);
		return employeeToDelete;
	}

	@Override
	public Employee update(int empId, Employee emp) {
		Employee employeeToUpdate=getEmployeeById(empId);
		employeeToUpdate.setName(emp.getName());
		employeeToUpdate.setAge(emp.getAge());
		return empRepo.save(employeeToUpdate);
	}
}



public class EmployeeNotFoundException extends RuntimeException{
}





step 5: create rest controller
-------------------------------



@RestController
public class EmpRestController {
	
	@Autowired
	private EmployeeService employeeService;
	

	@GetMapping(path="employee", produces=MediaType.APPLICATION_JSON_VALUE)
	public List<Employee> allEmployees(){
		return employeeService.getAll();
	}
	
	
	
	@GetMapping(path="employee/{id}",produces=MediaType.APPLICATION_JSON_VALUE )
	public Employee getEmployeeById(@PathVariable(name="id")int id){
		return employeeService.getEmployeeById(id);
	}
	
	@PostMapping(path="employee",produces=MediaType.APPLICATION_JSON_VALUE, 
			consumes=MediaType.APPLICATION_JSON_VALUE )
	public Employee addEmployee(@RequestBody Employee employee){
		return employeeService.save(employee);
	}
	
	@PutMapping(path="employee/{id}",produces=MediaType.APPLICATION_JSON_VALUE, 
			consumes=MediaType.APPLICATION_JSON_VALUE )
	public Employee updateEmployee(@PathVariable(name="id") int id,   @RequestBody Employee emp){
		return  employeeService.update(id, emp);
		
	}
	
	
	@DeleteMapping(path="employee/{id}",produces=MediaType.APPLICATION_JSON_VALUE)
	public Employee deleteEmplloyee(@PathVariable(name="id") int id){
		return employeeService.delete(id);
	}
}






@SpringBootApplication
public class DemoApplication implements CommandLineRunner{

	@Autowired
	private EmployeeService empService;
	
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		System.out.println("rec are saved...");
		empService.save(new Employee("raj", 33));
		empService.save(new Employee("ekta", 30));
		empService.save(new Employee("gunika", 10));
		empService.save(new Employee("keshav", 5));
		
		
		
	}

}








spring boot jsp
================

step 1: create jsp page to render data
-----------------------------------------

test with hello controller

@Controller
public class TestController {

	@RequestMapping("/welcome")
	public ModelAndView firstPage() {
		return new ModelAndView("welcome");
	}

}

put jsp in /bootapp/src/main/webapp/WEB-INF/views




step 2: create EmployeeController to use jsp


@Controller
public class EmpController {

	@Autowired
	private EmployeeService employeeService;

	@RequestMapping(value = "viewAll", method = RequestMethod.GET)
	public ModelAndView viewAll() {
		ModelAndView m = new ModelAndView();
		m.setViewName("viewAll");
		m.addObject("emps", employeeService.getAll());
		return m;
	}

	@RequestMapping(value = "addEmp", method = RequestMethod.GET)
	public String showEmpForm(ModelMap map) {
		Employee emp = new Employee();
		map.addAttribute("emp", emp);
		return "empform";
	}

	@RequestMapping(value = "addEmp", method = RequestMethod.POST)
	public String submittedEmpForm(
			@ModelAttribute(value = "emp") Employee employee) {
		System.out.println("--------------------------");
		System.out.println(employee);
		int id = employee.getId();
		if (id == 0) {
			employeeService.save(employee);
		} else {
			employeeService.update(id, employee);
		}
		return "redirect:viewAll";
	}

	@RequestMapping(value = "delEmp", method = RequestMethod.GET)
	public String deleteBook(HttpServletRequest request) {

		Integer id = Integer.parseInt(request.getParameter("id"));
		employeeService.delete(id);
		return "redirect:viewAll";
	}

	@RequestMapping(value = "updateEmp", method = RequestMethod.GET)
	public String updateEmp(HttpServletRequest request, ModelMap model) {

		Integer id = Integer.parseInt(request.getParameter("id"));
		Employee empToUpdate = employeeService.getEmployeeById(id);

		model.addAttribute("emp", empToUpdate);
		return "empform";
	}


	@ExceptionHandler(EmployeeNotFoundException.class)
	public ModelAndView handleEmployeeNotFoundException(HttpServletRequest request, Exception ex){
		ModelAndView modelAndView = new ModelAndView();
	    modelAndView.addObject("exception", ex);
	    modelAndView.addObject("url", request.getRequestURL());
	    
	    modelAndView.setViewName("error");
	    return modelAndView;
	}	
}




step 3: create viewAll jsp


<body>
	<table>
		<thead>
			<tr>
				<th>emp id</th>
				<th>emp name</th>
				<th>emp age</th>
			</tr>
		</thead>

		<tbody>

			<c:forEach var="e" items="${emps}">
				<tr>
					<td>${e.id}</td>
					<td>${e.name}</td>
					<td>${e.age}</td>
					<td><a href="updateEmp?id=<c:out value="${e.id }"/>">update</a>
					<td><a href="delEmp?id=<c:out value="${e.id }"/>">delete</a>
				</tr>
			</c:forEach>

		</tbody>
	</table>
	<a href="addEmp">Add new employee</a>
</body>






step 4: create empform jsp


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>new emp reg form</title>
</head>
<body>

<form:form action="addEmp" method="post" modelAttribute="emp">
	<form:hidden path="id"/><br/>
	Enter emp name:<form:input path="name"/><br/>
	Enter emp age:<form:input path="age"/><br/>
	<input type ="submit"/>
</form:form>

</body>
</html>




Spring security configuration with spring boot:
-----------------------------------------------
why not tomcat/weblogic security?
-----------------------------------------

Spring provide: url , method and object level security



Configuration hello world:
--------------------------

spring.security.user.name=raj
spring.security.user.password=raj



Spring security step by step:
-------------------------


1. create some secrure url:
----------------------------

@RestController
public class SecureRestController {

	@GetMapping(path="home")
	public String home(){
		return "hello to home";
	}
	
	@GetMapping(path="admin")
	public String homeAdmin(){
		return "hello to admin";
	}
	
	@GetMapping(path="mgr")
	public String homeMgr(){
		return "hello to mgr";
	}
	
	@GetMapping(path="emp")
	public String homeEmp(){
		return "hello to emp";
	}
	
}


2. Create spring security configuration:
-------------------------------------

@EnableWebSecurity
public class AppSecurityConfig extends WebSecurityConfigurerAdapter {

	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication()
		.withUser("raj").password("raj123").roles("ADMIN")
		.and()
		.withUser("ekta").password("ekta123").roles("MGR")
		.and()
		.withUser("gunika").password("gun123").roles("EMP");
		
	}
	@Bean
	public PasswordEncoder getPasswordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable()
		.authorizeRequests()
		.antMatchers("/admin/**").hasAnyRole("ADMIN")
		.antMatchers("/mgr/**").hasAnyRole("ADMIN", "MGR")
		.antMatchers("/emp/**").hasAnyRole("ADMIN","MGR","EMP")
		.antMatchers("/home/**").permitAll()
		.and().httpBasic();
		
	}

}


3. Configure AuthenticationEntryPoint
---------------------------------------------


@Component
public class MyAuthEntryPoint extends BasicAuthenticationEntryPoint{

	@Override
	public void afterPropertiesSet() {
		setRealmName("training.com");
		super.afterPropertiesSet();
	}

	@Override
	public void commence(HttpServletRequest request, HttpServletResponse response,
			AuthenticationException authException) throws IOException {
		response.addHeader("WWW-Authenticate", "Basic realm=\"" + getRealmName() + "\"");
		response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
		PrintWriter out=response.getWriter();
		out.print("401-UNAUTHORIZED-contact rgupta.metch@gmil.com");
	}
	
	
}

4. using BasicAuthenticationEntryPoint
----------------------------------------



@EnableWebSecurity
public class AppSecurityConfig extends WebSecurityConfigurerAdapter {

	
	@Autowired
	private MyAuthEntryPoint authEntryPoint;
	
	
	//.........
	@Bean
	public PasswordEncoder getPasswordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		//...........
		.and().httpBasic().authenticationEntryPoint(authEntryPoint);
		
	}


	
}



5. Configuring spring security with hibernate
----------------------------------------


create dao dto:
----------------

@Entity
@Table(name="user_table")
public class User {
	
	@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;
	private String name;
	private String password;
	
	private String[]roles;// ADMIN, MGR, CLERK

	public User() {}
	
	public User(String name, String password,
			String[] roles) {
		this.name = name;
		this.password=password;
		this.roles = roles;
	}

	//getter setter 

}



@Repository
public interface UserRepo extends CrudRepository<User, Long>{
	public User findByName(String name);
}





create service layer:
---------------------
public interface UserService {
	public void addUser(User user);
	public User findByName(String name);
}




@Service
@Transactional
public class UserServiceImpl implements UserService {

	private UserRepo userRepo;

	@Autowired
	public UserServiceImpl(UserRepo userRepo) {
		this.userRepo = userRepo;
	}
	
	@Override
	public void addUser(User user) {
		userRepo.save(user);
	}
	@Override
	public User findByName(String name) {
		return userRepo.findByName(name);
	}
}



Configure userdetails service:
-----------------------------

@Service
public class DetailService implements UserDetailsService{
	@Autowired
	private UserService userService;
	
	@Override
	public UserDetails loadUserByUsername(String name)throws UsernameNotFoundException {
		User user=userService.findByName(name);
		
		if(user==null)
			throw new UsernameNotFoundException("user is not found");
		else
		//convert to spring security user
		return new org.springframework.security.core.userdetails.User(user.getName(), user.getPassword(), 
				AuthorityUtils.createAuthorityList(user.getRoles()));
	}

}


Configure WebSecurityConfigurerAdapter:
-----------------------------
@EnableWebSecurity
public class ApplicationSecConfig extends WebSecurityConfigurerAdapter{
	
	@Autowired
	private UserDetailsService detailService;
	
	protected void configure(AuthenticationManagerBuilder auth)throws Exception {
		auth.userDetailsService(detailService);
	}
	
	/*@Bean
	public BCryptPasswordEncoder getPasswordEncoder(){
		return new BCryptPasswordEncoder();
	}*/
	
	@Autowired
	private BasicAuthenticationEntryPoint authEntryPoint;
	
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
		.and()
		.authorizeRequests()
		.antMatchers("/admin/**").hasAnyRole("ADMIN")
		.antMatchers("/mgr/**").hasAnyRole("ADMIN","MGR")
		.antMatchers("/emp/**").hasAnyRole("EMP","ADMIN","MGR")
		.and().httpBasic().authenticationEntryPoint(authEntryPoint);
	}
}



	List<String> list=Arrays.asList("a","n");
		String[] names=new String[list.size()];
		list.toArray(names);
		
Configuration security Hibernate config
---------------------------------------

@SpringBootApplication
public class DemoApplication implements CommandLineRunner{

	@Autowired
	private UserService userService;
	
	
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}


	@Override
	public void run(String... args) throws Exception {
//		User user1=new User("raj", "raj", new String[] {"ROLE_ADMIN","ROLE_MGR","ROLE_EMP"});
//		User user2=new User("ekta", "ekta", new String[] {"ROLE_MGR","ROLE_EMP"});
//		User user3=new User("gunika", "gunika", new String[] {"ROLE_EMP"});
//		
//		userService.addUser(user1); 
//		userService.addUser(user2); 
//		userService.addUser(user3); 
		System.out.println("added--------------");
	}

}





Spring MVC jsp secrity configuration:
------------------------------------


Dependencies for jsp:

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>



creating dao layer:
-------------------


@Entity
@Table(name="u_table")
public class User {
	private static BCryptPasswordEncoder encoder=new BCryptPasswordEncoder();
	@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	private String userName;
	private String password;
	private String roles[];
	private String email;
	private boolean valid;
	
	public User() {}
	
	public User(String userName, String password, String[] roles, String email,
			boolean valid) {
		super();
		this.userName = userName;
		setPassword(password);
		this.roles = roles;
		this.email = email;
		this.valid = valid;
	}


	public void setPassword(String password) {
		this.password = encoder.encode(password);
	}

	//
}


@Repository
public interface UserRepo extends CrudRepository<User, Integer>{
	public User findByUserName(String userName);
}




service layer:
------------
public interface UserService {
	public void addUser(User  user);
	public User findByUserName(String userName);
}

@Transactional
@Service
public class UserServiceImpl implements UserService{

	@Autowired
	private UserRepo userRepo;
	
	@Override
	public void addUser(User user) {
		userRepo.save(user);
	}

	@Override
	public User findByUserName(String userName) {
		return userRepo.findByUserName(userName);
	}

}



security configuration:
--------------------


public class SecUser implements UserDetails{
	private static final long serialVersionUID = 2469986169861297608L;
	private User user;
	public SecUser(User user) {
		this.user = user;
	}
	
	public User getUser() {
		return user;
	}



	public SecUser() {}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return AuthorityUtils.createAuthorityList(user.getRoles());
	}

	@Override
	public String getPassword() {
		return user.getPassword();
	}

	@Override
	public String getUsername() {
		return user.getPassword();
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return user.isValid();
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((user == null) ? 0 : user.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SecUser other = (SecUser) obj;
		if (user == null) {
			if (other.user != null)
				return false;
		} else if (!user.equals(other.user))
			return false;
		return true;
	}

}





@Service
public class DetailService implements UserDetailsService {

	@Autowired
	private UserService userService;
	@Override
	public UserDetails loadUserByUsername(String userName)throws UsernameNotFoundException {
		User user=userService.findByUserName(userName);
		if(user==null)
			throw new UsernameNotFoundException("user not found");
		return new SecUser(user);
		
	}
}





@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter{

	@Autowired
	private UserDetailsService userDetailsService;
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth)
			throws Exception {
	
		auth.userDetailsService(userDetailsService);
	}
	@Bean
	public BCryptPasswordEncoder getEncoder(){
		return new BCryptPasswordEncoder();
	}
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable()
		.authorizeRequests()
		.antMatchers("/admin/**").hasAnyRole("ADMIN")
		.antMatchers("/mgr/**").hasAnyRole("ADMIN","MGR")
		.antMatchers("/clerk/**").hasAnyRole("ADMIN","MGR","CLERK")
		.antMatchers("/home/**").authenticated()
		.and().formLogin()
		.loginPage("/login").loginProcessingUrl("/myloginaction")
		.usernameParameter("username").passwordParameter("password")
		.defaultSuccessUrl("/home")
		.permitAll()
		.and()
		.httpBasic()
		.and()
		.exceptionHandling().accessDeniedPage("/accessdenied")
		.and().sessionManagement().maximumSessions(1);
		
	}

	
}





Controller endpoints:
---------------------


@Controller
public class Hello {
	
	@GetMapping(path="accessdenied")
	public String accessdenied(){
		return "403";
	}
	
	@GetMapping(path="login")
	public String login(){
		return "loginpage";
	}
	
	@GetMapping(path="/")
	public String welcome(){
		
		 return "redirect:/home";
	}
	
	@GetMapping(path="home")
	public String home(@AuthenticationPrincipal SecUser user){
		System.out.println(user.getUser());
		return "home";
	}
	
	@GetMapping(path="clerk")
	public String helloClerk(@AuthenticationPrincipal SecUser user){
		System.out.println(user);
		return "clerk_home";
	}
	
	@GetMapping(path="mgr")
	public String helloMgr(){
		return "mgr_home";
	}
	@GetMapping(path="admin")
	public String helloAdmin(){
		return "admin_home";
	}
	
}



@SpringBootApplication
public class BankappSecApplication implements CommandLineRunner{

	@Autowired
	private UserService userService;
	
	public static void main(String[] args) {
		SpringApplication.run(BankappSecApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		
//		userService.addUser(new User("raj", "raj", new String[]
//				{"ROLE_ADMIN","ROLE_MGR","ROLE_CLERK"}, "r@r.com", true));
//		userService.addUser(new User("ekta", "ekta", new String[]
//				{"ROLE_MGR","ROLE_CLERK"}, "e@r.com", true));
//		userService.addUser(new User("gunika", "gunika", new String[]
//				{"ROLE_CLERK"}, "g@r.com", true));
	}

}







put jsp in /bootapp/src/main/webapp/WEB-INF/views











