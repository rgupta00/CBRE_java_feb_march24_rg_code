
Spring boot getting started
___________________________

Agenda:
__________

 day 1:
_________
 Advantage of spring boot , configuration spring boot
 Spring boot hello world, REST service
 Spring jpa, spring data
 Spring jdbc, spring transaction mgt
 Book store curd REST service
 Understand Spring boot auto config
 Using ResponseEntity & http status code
 Handling BookNotFoundException
 JSR 303 validation

 day 2:
________
 hateoas
 Swagger Documentation
 Monitoring APIs with Spring Boot Actuator
 Versioning RESTful Services 
 Enable cacheing
 schedule processes

day 3:
_______
 Spring Security
 Spring boot microservice

........
spring mvc
HATEOAS
spring jdbc
spring jpa
mysql
security
devtools
Actuator



 Day 32: Agenda
-------------------
 review spring boot , what is rest?
 Book store curd REST service
 Using ResponseEntity & http status code
 Handling BookNotFoundException
 JSR 303 validation
 hateoas
 Swagger Documentation
 Versioning RESTful Services 
 Enable cacheing
 schedule processes
 Spring boot jsp
 Monitoring APIs with Spring Boot Actuator


 Spring security
 Spring security with jpa





@PathVariable
@RequestParam


@ResponseEntity = Data + status code

Exeption handling:

@ResponseStatus(code = HttpStatus.NOT_FOUND)

@ControllerAdvice
@RestController
class ExceptionHander extends ResponseExceptionHander{
	@ExceptionHandler(EmployeeNotFoundException.class)
	public ResponseEntity<ErrorData> handle404Error(EmployeeNotFoundException exception){
	

}

	Supporting both xml and json:
	_______________________________

	Step 1: put parser for xml

	     	   <dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>

	Step 2:
	@GetMapping(path = "books", produces = {MediaType.APPLICATION_JSON_VALUE, 
			MediaType.APPLICATION_XML_VALUE})






History Spring boot : Summarized:
_________________________________

1.0.0: Support from Java 6 - 8
1.3.0: Support from Java 7 - 8, additional configuration for Java 6 required
2.0.0: Support from Java 8 - ...





	Advantage of spring boot , configuration spring boot
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 	Advantage of spring boot
	_____________________

	=> Auto-Configuration 

	=> Dependency Management

	=> Externalized Configuration
		bean can be configured through application.properties file 
		without touching java or xml config

	=> Production support
		We get health checking, application and jvm metrics, 
		jmx via http and a few more things for free

	=> Runnable Jars
		 We can package your application as a runnable jar with embedded tomcat
		 included so it presents a self-contained deployment unit

	=> Microservice


	configuration spring boot
	____________________

	create spring boot project: choose web, jpa, derby....

	//Configuration, @EnableAutoConfiguration and @ComponentScan



	@SpringBootApplication
	public class Application {
	
	  public static void main(String[] args) {
	    ApplicationContext ctx = SpringApplication.run(Application.class, args);
	
	    System.out.println("Let's inspect the beans provided by Spring Boot:");
	
	    String[] beanNames = ctx.getBeanDefinitionNames();
	    Arrays.sort(beanNames);
	    for (String beanName : beanNames) {
	        System.out.println(beanName);
	    }
	  }
	
	}

	spring-boot:run


	Spring boot ApplicationRunner and CommandLineRunner:
	----------------------------------------

	@Component
	public class ApplicationRunnerBean implements ApplicationRunner {
	@Override
	public void run(ApplicationArguments args) throws Exception {
		String collectStr = Arrays.stream(args.getSourceArgs()).collect(Collectors.joining(","));
		System.out.println(collectStr);
	}

	}
https://www.concretepage.com/spring-boot/spring-boot-commandlinerunner-and-applicationrunner-example#:~:text=The%20difference%20between%20CommandLineRunner%20and,spring%20ApplicationArguments%20as%20an%20argument.&text=To%20execute%20them%20in%20an,Order%20annotation%20or%20Ordered%20interface.
	Hello world:
	-----------

	
	@RestController
	public class HelloRestController {
		
		@RequestMapping("/hello")
		public String hello(){
			return "spring boot";
		}
           }  
	


	public class Book {
		private Integer id;
		private String title;
		private String author;
		private Double price;
	}


	
	
	@GetMapping("book/{id}")
	public Book getBookById(@PathVariable(name = "id")int id) {
		return new Book(id, "java", "raj", 500.00);
	}





	application.properties
	________________--
	server.servlet.context-path=/bookapp
	server.port=8080

	        <dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>



Running spring boot :
____________________

	eclipse plugin
	spring initilizer
	spring cli

	https://www.journaldev.com/8195/spring-boot-cli-setup-and-helloworld-example

	spring init -n=jpa-one-to-one-demo -d=web,jpa,mysql --package-name=com.example.jpa demoproj


Spring boot config
____________________

server.servlet.context-path=/bookapp
server.port=8082

spring.datasource.url=jdbc:mysql://localhost:3306/demoms?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true




bannner:
spring.banner.location=classpath:banner.txt

https://devops.datenkollektiv.de/banner.txt/index.html



java -jar  jpa_demo2-0.0.1-SNAPSHOT.jar --server.port=8050

https://docs.spring.io/spring-boot/docs/1.1.2.RELEASE/reference/html/common-application-properties.html

Note:Spring boot config: EnableAutoConfiguration
________________________________________________

disable all database related auto configuration in spring-boot
__________________________________________________________

@Configuration
@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class, HibernateJpaAutoConfiguration.class})
@Profile ("client_app_profile_name")
public class ClientAppConfiguration {
    //it can be left blank
}


	Spring jpa, spring data
	_______________________

	@Entity
	@Table(name="book_table")
	public class Book {
		@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
		private Integer id;
		
		//@Size(min=2, message="title should have atleast 4 characters")
		private String title;
		private String author;
		private double price;
		






	@Repository
	public interface BookRepo extends CrudRepository<Book, Integer> {
		public List<Book>findByTitle(String title);
	}



	Step 2: Service layer
	______________________

	public interface BookService {
		public List<Book> getAllBooks();
		public Book getBookById(int id);
		public Book addBook(Book book);
		public List<Book> getBookByTitle(String title);
		public Book updateBook(int bookId, Book book);
		public Book deleteBook(int bookId);
		
	}

	@Service
	@Transactional
	public class BookServiceImpl implements BookService{
		@Autowired
		private BookRepo bookRepo;
		
		@Override
		public List<Book> getAllBooks() {
			return (List<Book>) bookRepo.findAll();
		}
		
		@Override
		public Book getBookById(int id) {
			return bookRepo.findById(id).orElseThrow(BookNotFoundException::new);
		}
		
		@Override
		public Book addBook(Book book) {
			return bookRepo.save(book);
		}
		
		@Override
		public  List<Book> getBookByTitle(String title) {
			return bookRepo.findByTitle(title);
		}
		
		@Override
		public Book updateBook(int bookId, Book book) {
			Book bookToUpdated=getBookById(bookId);
			bookToUpdated.setPrice(book.getPrice());
			
			return bookRepo.save(bookToUpdated);
		}
		
		@Override
		public Book deleteBook(int bookId) {
			Book bookToBeDeleted=getBookById(bookId);
			bookRepo.delete(bookToBeDeleted);
			return bookToBeDeleted;
		}
	}



	
	public class BookNotFoundException extends RuntimeException{
		private static final long serialVersionUID = 4351688402749113855L;

	}


	Book store curd REST service  :Rest controller
	__________________________________

	CRUD  application:
			
		@RestController
		public class BookRestController {
		
			//using response entity
			
			private BookService bookService;
			
			@Autowired
			public BookRestController(BookService bookService) {
				this.bookService = bookService;
			}
		
			@GetMapping("book")
			public List<Book> getAllBooks() {
				return bookService.getAllBooks();
			}
			
			@GetMapping("book/{id}")
			public Book getBookById(@PathVariable(name = "id")int id) {
				return bookService.getBookById(id);
			}
			
			@PostMapping("book")
			public Book addBook(@RequestBody Book book) {
				return bookService.addBook(book);
			}
			
			@PutMapping("book/{id}")
			public Book updateBook(@PathVariable(name = "id")int id,@RequestBody Book book ) {
				return bookService.updateBook(id, book);
			}
			
			@DeleteMapping("book/{id}")
			public Book delBook(@PathVariable(name = "id")int id) {
				return bookService.deleteBook(id);
			}
			
		}


	Using ResponseEntity & http status code 
 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	=> use ResponseEntity =wrap response object + httpstatus code + exceptional cases

	// @RestController=@Controller + @ResponseBody

	@RestController
	@RequestMapping(path="api")
	public class BookRestController {
	
		@Autowired
		private BookService bookService;
		
		@GetMapping(path="book", produces=MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<List<Book> > getAllBooks(){
			return new ResponseEntity<List<Book>>(bookService.getAllBooks(), HttpStatus.OK);
		}
		
		@GetMapping(path="book/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<Book> getBookById(@PathVariable(name="id")int id){
			return new ResponseEntity<Book>(bookService.getBookById(id), HttpStatus.OK);
		}
		
		
		@PostMapping(path="book", produces=MediaType.APPLICATION_JSON_VALUE
				,consumes=MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<Book> addBook(@Valid  @RequestBody Book book){
			return new ResponseEntity<Book>(bookService.addBook(book), HttpStatus.CREATED);
		}
		
		
		@PutMapping(path="book/{id}", produces=MediaType.APPLICATION_JSON_VALUE
				,consumes=MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<Book> updateBook(@PathVariable(name="id")int id,  @RequestBody Book book){
			return new ResponseEntity<Book>(bookService.updateBook(id, book), HttpStatus.CREATED);
		}
		
		
		@DeleteMapping(path="book/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<Void> deleteBook(@PathVariable(name="id")int id){
			 bookService.deleteBook(id);
			 return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
		}
		
		
	}










	Spring boot error handling
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	@ResponseStatus(code=HttpStatus.NOT_FOUND)
	public class BookNotFoundException extends RuntimeException{
		private static final long serialVersionUID = 4351688402749113855L;

	}




	@ControllerAdvice
	@RestController
	public class ExceptionHandlerController extends ResponseEntityExceptionHandler{
		
		@ExceptionHandler(Exception.class)
		public final ResponseEntity<Object> handleAllExceptions(Exception ex,
				WebRequest request) {
			ErrorDetails errorDetails = new ErrorDetails(new Date(),
					ex.getMessage(), request.getDescription(false));
			return new ResponseEntity<Object>(errorDetails,HttpStatus.INTERNAL_SERVER_ERROR);
		}
	
		@ExceptionHandler(BookNotFoundException.class)
		public ResponseEntity<Object> handleBookNotFoundEx(
				BookNotFoundException ex, WebRequest req) {
			ErrorDetails details = new ErrorDetails(new Date(), "book not found",
					req.getDescription(false));
			return new ResponseEntity<Object>(details, HttpStatus.NOT_FOUND);
		}
		
		
	
	}


	//Error handling class

	public class ErrorDetails {
		private Date timestamp;
		  private String message;
		  private String details;
	}
		





	Step 7: JSR 303 validation
	~~~~~~~~~~~~~~~~~~~~~~~~~~~

	step 0:Starting with Boot 2.3, we also need to explicitly add the spring-boot-starter-validation dependency:
	
	<dependency> 
	    	<groupId>org.springframework.boot</groupId> 
    		<artifactId>spring-boot-starter-validation</artifactId> 
	</dependency>


	step 1: apply jsr 303 annotation on pojo

	public class Book {
		private int id;
		private String isbn;
		@Size(min=2, message="title should have atleast 4 characters")
	}

	step 2: 
	public ResponseEntity<Book> createBook(@Valid @RequestBody Book book) {

	step 3:
	@Override
		protected ResponseEntity<Object> handleMethodArgumentNotValid			   (MethodArgumentNotValidException ex,
		    HttpHeaders headers, HttpStatus status, WebRequest request) {
		  ErrorDetails errorDetails = new ErrorDetails(new Date(), "Validation Failed",
		      ex.getBindingResult().toString());
		  return new ResponseEntity<Object>(errorDetails, HttpStatus.BAD_REQUEST);
		} 


	https://stackoverflow.com/questions/33663801/how-do-i-customize-default-error-message-from-spring-valid-validation

       @Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		//how to deal 
		BindingResult bindingResult = ex.getBindingResult();
		List<FieldError> fieldErrors = bindingResult.getFieldErrors();
		//? expore some method inside this fieldErrors and then put
		
		StringBuilder builder=new StringBuilder("validation failed for : ");
		
		for(FieldError fe:fieldErrors ) {
			builder.append(fe.getField()).append(" ,");
			
		}
		
		ErrorMessage errorMessage = new ErrorMessage(builder.toString(), 
				"rg@gmail.com", new Date());
		return new ResponseEntity<Object>(errorMessage, HttpStatus.BAD_REQUEST);
	}



	Supporting both xml and json:
	_______________________________

	Step 1: put parser for xml

	     	   <dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>

	Step 2:
	@GetMapping(path = "books", produces = {MediaType.APPLICATION_JSON_VALUE, 
			MediaType.APPLICATION_XML_VALUE})





	Step 8: hateoas
	~~~~~~~~~~~~~~~
	HATEOAS- Hypertext as the engine of Application state
	Use link in the application state ( Response data)
	
	Advantage:
	the client can have a single entry point to the application and att the further action can be taken 
	based on the links in the response data
	Reduce dependency between client and service, so that the server can make changes to its URI 
	without breaking the client side code

	Implementation:
		RepresentationModel
		WebMvcLinkBuilder
		Link



step 1: put hateoas dependencies

step 2: enable static improt:

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;


step 3: change POJO class:

public class Book extends RepresentationModel<Book>{
}


step 4: get an book:
----------------------
@GetMapping(path = "/book/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public EntityModel<Book> getBookById2(@PathVariable(name = "id") int id) {
		Link link=linkTo(methodOn(BookRestController.class).getBookById2(id)).withSelfRel();
		
		Book book = bookService.getBookById(id);
		book.add(link);
		
		return EntityModel.of(book);
	}


step 5: get all books:
----------------------
	// get all the books
	@GetMapping(path = "book", produces = MediaType.APPLICATION_JSON_VALUE)
	public CollectionModel<Book> getAllBooks() {
		List<Book> books = bookService.getAllBooks();
		for(Book book: books) {
			Link link=
					linkTo(methodOn(BookRestController.class).getBookById(book.getId()))
					.withSelfRel();
			book.add(link);
		}
		return CollectionModel.of(books);
	}



@GetMapping(path = "/book2/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public EntityModel<Book> getBookById2(@PathVariable(name = "id") int id) {
		Link link=
				linkTo(methodOn(BookRestController.class).getBookById2(id))
				.withSelfRel();
		
		Book book = bookService.getBookById(id);
		book.add(link);
		
		return EntityModel.of(book);
	}








 	9. Swagger Documentation
	~~~~~~~~~~~~~~~~~~~~~

	=> Swagger is almost equivalent to SOAP formate, used for documentation of REST api
	=> how to Configuring Auto Generation of Swagger Documentation


	UPPDATE : SWAGGER 2.X IS NOT WORKING PRROPERLY

	BETTER TO MIGRATE
	Documenting a Spring REST API Using OpenAPI 3.0
	_____________________________________________

	Step 1:

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.6.4</version>
		</dependency>

	Step 2:

	http://localhost:8090/bookapp/v3/api-docs
	
	http://localhost:8090/bookapp/swagger-ui/index.html

	http://localhost:8090/bookapp/v3/api-docs.yaml

	Step 3:
	Customization location
	springdoc.swagger-ui.path=/swagger-ui-bookapp.html

	@OpenAPIDefinition(info = @Info(title = "bookapp API", version = "2.0" , description = "YMSLI bookapp API"))
	public class BookappApplication implements CommandLineRunner {
	}




	Step 10: Monitoring APIs with Spring Boot Actuator
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	=> Spring Boot Actuator auto-configures all enabled endpoints to be exposed over HTTP. 
	=> The default convention is to use the id of the endpoint with a prefix of /actuator as the URL path. 
		For example, health is exposed as /actuator/health.

	Customizing the Management Endpoint Paths
	----------------------------------------
			management.endpoints.web.base-path=/manage

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-browser</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

	=> Security issues
	management.security.enabled=false




	Step 11: Implementing some field Filtering for RESTful Service
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	What is i want to filter out some information from rest response


	Eg: I want to ignore field2? use annotation @JsonIgnore

	//@JsonIgnoreProperties(value={"field1","field2"})
	public class SomeBean {
		private String field1;

		@JsonIgnore
		private String field2;
		private String field3;
	}


	@RestController
	public class FilteringController {

		@RequestMapping("/filterdemo")
		public SomeBean getBean(){
			return new SomeBean("value 1", "value 2", "value 3");
		}

       		@RequestMapping("/filterdemo-list")
		public List<SomeBean> getBeanList(){
		
			List<SomeBean> beans=Arrays.asList(new SomeBean("value 1", "value 2", "value 3"),
				new SomeBean("value 1", "value 2", "value 3"));
			return beans ;
		}
	}





	Step 12: Versioning RESTful Services 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 	Versioning?
 		-Media type versioning ( aka "content negotiation" or " accept header")- Github
 		-Custome headers versioning- Microsoft
 		-URI versioning -Twitter
 		-Parameter versioning -Amazon

 		-Factors effect decision
  		-url pollution
 		- misuse of http headers
  		- caching
  		- can we execute teh request on browser?
  		- api doc
 		- No perfect sol



Consider I have two version of person api over the time:

public class PersonV1 {
  private String name;

  public PersonV1() {
    super();
  }
 // ....
}

public class PersonV2 {
  private Name name;
	//........
}

public class Name {
  private String firstName;
  private String lastName;
 //.......

}

 How to handle this?


@RestController
public class PersonVersioningController {

  @GetMapping("v1/person")
  public PersonV1 personV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping("v2/person")
  public PersonV2 personV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

  @GetMapping(value = "/person/param", params = "version=1")
  public PersonV1 paramV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping(value = "/person/param", params = "version=2")
  public PersonV2 paramV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

  @GetMapping(value = "/person/header", headers = "X-API-VERSION=1")
  public PersonV1 headerV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping(value = "/person/header", headers = "X-API-VERSION=2")
  public PersonV2 headerV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

  @GetMapping(value = "/person/produces", produces = "application/vnd.company.app-v1+json")
  public PersonV1 producesV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping(value = "/person/produces", produces = "application/vnd.company.app-v2+json")
  public PersonV2 producesV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

}





	Step 12: Enable cacheing
	~~~~~~~~~~~~~~~~~~~~~~~~

	step 1: add @EnableCaching to spring boot strap class...
	step 2: put concurrentcachemanager to application ( latter will use production cache system)

		@Transactional
		@SpringBootApplication
		@EnableCaching
		public class Application {
		
			public static void main(String[] args) throws Exception{
				SpringApplication.run(Application.class, args);
			}
			
			@Bean
			public CacheManager cacheManager(){
				// ctr accept array of string, tell cache manages by cache manager
				ConcurrentMapCacheManager cacheManager=new ConcurrentMapCacheManager("books");
				return cacheManager;
				
			}
		}


	step 3:apply @Cacheable annotation to service layer

		@Service
		@Transactional(propagation=Propagation.SUPPORTS,readOnly=true)
		public class BookServiceImp2 implements BookService{
		
			@Autowired
			private BookRepo bookRepo;
			
			@Override
			public List<Book> getAllBooks() {
				return bookRepo.findAll();
			}
		
			@Cacheable(value="books",key="#bookId" )
			@Override
			public Book getBookById(int bookId) {
				return bookRepo.getOne(bookId);
			}
		
			@CachePut(value="books", key="#result.id")
			@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
			@Override
			public Book addBook(Book book) {
				return bookRepo.save(book);
			}
		
			@CachePut(value="books", key="#result.id")
			@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
			@Override
			public Book updateBook(Book book) {
				return bookRepo.save(book);
			}
		
			@CacheEvict(value="books", key="#id")
			@Transactional(propagation = Propagation.REQUIRED, readOnly = false, 
					rollbackFor = BookNotFoundException.class)
			@Override
			public Book removeBook(int bookId) throws BookNotFoundException {
				Book book = bookRepo.getOne(bookId);
				if(book==null)
					throw new BookNotFoundException();
				else
				bookRepo.delete(bookId);
				return book;
			}
		
			@CacheEvict(value="books", allEntries=true)
			
			@Override
			public void evictCache() {
				// TODO Auto-generated method stub
				
			}
		}




Configuration GuavaCacheManager cache manager:
--------------------------------------------------

	step 1: put dependencies

	<properties>
		..........
		<guava.version>18.0</guava.version>
	</properties>

	<!-- Dependencies for GuavaCacheManager -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>



	step 2: change bootstrap class

	@Bean
	public CacheManager cacheManager(){
		// ctr accept array of string, tell cache manages by cache manager
		GuavaCacheManager cacheManager=new GuavaCacheManager("books");
		return cacheManager;
		
	}





	Step 13: schedule processes
	~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Note:
	The simple rules that we need to follow to annotate a method with @Scheduled are:

			a method should have the void return type
			a method should not accept any parameters

	step 1: put @EnableScheduling on bootstrap class

	step 2: create an component with @Scheduled annotation

		@Component
		public class ScheduledJob {
			private Logger logger = LoggerFactory.getLogger(this.getClass());
		
			@Autowired
			private BookService service;
		
			@Scheduled(cron = "0,30 * * * * *")
			public void cronJob() {
				logger.info("> cronJob");
		
				// Add scheduled logic here
		
				Collection<Book> books = service.getAllBooks();
				logger.info("There are {} books in the data store.", books.size());
		
				logger.info("< cronJob");
			}
		
			// after application startup delay of 5 sec, schedule to run each after 15
			// sec.
			@Scheduled(initialDelay = 5000, fixedRate = 15000)
			public void fixedRateJob() {
				logger.info("> fixedRateJob");
		
				// Add scheduled logic here
		
				Collection<Book> greetings = service.getAllBooks();
				logger.info("There are {} books in the data store.", greetings.size());
		
				logger.info("< fixedRateJob");
			}
		
		}


ref:
https://www.baeldung.com/spring-scheduled-tasks
https://www.tutorialspoint.com/unix_commands/crontab.htm


=============================
web application with boot
=============================

We need to put dependency:

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>


spring.mvc.view.prefix:/WEB-INF/views/
spring.mvc.view.suffix:.jsp


@Controller
public class TestController {

	@RequestMapping("/welcome.html")
	public ModelAndView firstPage() {
		return new ModelAndView("welcome");
	}

}

put jsp in /bootapp/src/main/webapp/WEB-INF/views

https://david-kerwick.github.io/2018-01-17-dealing-with-java-8-localdate-in-jsp-s/


Converting jar to war and deploy over tomcat:
---------------------------------------------------
https://www.baeldung.com/spring-boot-war-tomcat-deploy





Example application:
----------------

Product

productId
productName
productPrice
productDiscount
productCategory
expiryDate
productQuantity




Spring boot jpa:
-------------------

How to make two unrelated pojo connected ?
------------------------------------

public class StudentEntity {
    private int rollNumber;
    private String name;
    private Integer departmentId;
    private Integer age;
    private String email;
}


public class DepartmentEntity {
    private int departmentId;
    private String departName;
}


     Query query = em.createQuery("Select s.rollNumber,s.name,d.departName,s.age,s.email from StudentEntity s 
           inner join DepartmentEntity d on s.departmentId=d.departmentId");


ref:
-----
https://medium.com/@techkarmo/spring-data-jpa-join-with-unrelated-entities-with-help-of-jpql-in-spring-boot-application-c358e11512bd
      

deploy spring boot as war to tomcat:
__________________________________-
https://www.baeldung.com/spring-boot-war-tomcat-deploy












How to Configure & Use SessionFactory Bean with spring boot
-------------------------------------------------------
https://stackoverflow.com/questions/55276436/how-to-handle-hibernate-sessionfactory-in-spring-boot



imp links:
-------------------
https://www.mkyong.com/spring-boot/spring-boot-spring-data-jpa-java-8-date-and-time-jsr310/
http://stackoverflow.com/questions/24351581/how-does-the-enableautoconfiguration-spring-annotation-work

how to convert boot project to war
http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file

how to logging 
http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html

great way to learn spring boot
https://springframework.guru/using-log4j-2-spring-boot/

https://semaphoreci.com/community/tutorials/testing-rest-endpoints-using-rest-assured
https://github.com/basdijkstra/workshops/tree/master/rest-assured

mkyoung for basic understanding of cacheing
https://www.mkyong.com/spring/spring-caching-and-ehcache-example/

http://howtodoinjava.com/spring/spring-restful/spring-restful-client-resttemplate-example/







how-to-hide-endpoints-from-swagger-documentation:
--------------------------------------------------

https://stackoverflow.com/questions/55010362/how-to-hide-endpoints-from-swagger-documentation-with-springfox
https://github.com/springfox/springfox/issues/2437


