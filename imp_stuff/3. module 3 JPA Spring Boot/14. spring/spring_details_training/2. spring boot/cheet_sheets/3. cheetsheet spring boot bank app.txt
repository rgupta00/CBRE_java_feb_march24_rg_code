


Spring framework basics 
--------------------------


Session 1:
----------
->Introduction Spring framework, where it fits, Spring boot design patterns
->Dependency Injection, Configuration-XML, Java, profile, conditional
->Aspect Oriented Programming, how it helps, configuration, examples
->Spring Hibernate


Session 2:
-----------
-> Spring rest
->Spring MVC, configuration
->Using @Controller and @RequestMapping annotations


Session 1:
----------
->Introduction Spring framework, where it fits, Spring boot design patterns

	Need of Spring?
	DI
	AOP
	Reduction of boilerplat code

 
Spring boot magic?
-----------------------
@SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiration

  ApplicationContext ctx = SpringApplication.run(Application.class, args);

    System.out.println("Let's inspect the beans provided by Spring Boot:");

    String[] beanNames = ctx.getBeanDefinitionNames();
    Arrays.sort(beanNames);
    for (String beanName : beanNames) {
        System.out.println(beanName);







 Example :bank fund transfer Application:

	public class Account {
	    private int id;
	    private String name;
	    private int balance;
	}



	public interface AccountDao {
	 public void update(Account account);
	 public Account find(int id);
	 public List<Account> getAllAccounts();
       }



	public class AccountDaoImp implements AccountDao {
	
		private Map<Integer, Account> accouts = new HashMap<Integer, Account>();
	
		{
			accouts.put(1, new Account(1, "raja", 5000));
			accouts.put(2, new Account(2, "ravi", 1000));
		}
	
		@Override
		public void update(Account account) {
			accouts.put(account.getId(), account);
		}
	
		@Override
		public Account find(int id) {
			return accouts.get(id);
		}

		public List<Account> getAllAccounts(){
			return null;
		}
	
	}




	public interface AccountService {
		public void transfer(int from, int to, int amount);
		public void deposit(int id, int amount);
		public Account getAccount(int id);
		public List<Account> getAllAccounts();
	}


	public class AccountServiceImp implements AccountService {
	
		private AccountDao accountDao;
		
	
		public void setAccountDao(AccountDao accountDao) {
			this.accountDao = accountDao;
		}
	
		@Override
		public void transfer(int from, int to, int amount) {
			Account fromAccount = accountDao.find(from);
		Account toAccount = accountDao.find(to);

		fromAccount.setBalance(fromAccount.getBalance() - amount);
		toAccount.setBalance(toAccount.getBalance() + amount);

		accountDao.update(fromAccount);
		accountDao.update(toAccount);

		}
	
		@Override
		public void deposit(int id, int amount) {
			Account account=accountDao.find(id);
			account.setBalance(account.getBalance()+amount);
			accountDao.update(account);
		}
	
		@Override
		public Account getAccount(int id) {
			// TODO Auto-generated method stub
			return accountDao.find(id);
		}
	

		public List<Account> getAllAccounts(){
			return accountDao.getAllAccounts();
		}
	}





3 ways to do configuraiton:
--------------------------------


	1. Using xml based configuration
	---------------------------------

	-> setter injection
	---------------------
	<bean id="accountService" class="com.service.AccountServiceImpl">
		<property name="accountDao" ref="accountDao"/>
	</bean>
	
	<bean id="accountDao" class="com.persistance.AccountDaoInMemoryImpl">
	
	</bean>

	
	Constructor Injection
	----------------------

		
	<bean id="accountService" class="com.service.AccountServiceImp">
		<constructor-arg ref="accountDao"/>
	</bean>
	<bean id="accountDao" class="com.persistance.AccountDaoImp" />


	2. Using annotation based configuration
	---------------------------------
	@Repository
	@Service
	@Controller




	3. Using Java based configuration
	---------------------------------

	@Configuration
	public class AccountConfiguration {

		@Bean
		public AccountService accountService() {
			AccountServiceImpl bean = new AccountServiceImpl();
			bean.setAccountDao(accountDao());
			return bean;
		}
	
		@Bean
		public AccountDao accountDao() {
			AccountDaoInMemoryImpl bean = new AccountDaoInMemoryImpl();
			//depedencies of accountDao bean will be injected here...
			return bean;
		}
	}


	Main 
	-----

	AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext			      (AccountConfiguration.class);
		
	AccountService service=ctx.getBean("accountService", AccountService.class);
		


->Dependency Injection, Configuration-XML, Java, Profiles
--------------------------------------------------------

Profile example:



application.properties

hello.message=jug delhi
#spring.profiles.active=dev


application-dev.properties

hello.message=jug delhi dev



application.properties

hello.message-test=jug delhi test



@RestController
public class Hello {

	@Value("${hello.message}")
	private String message;
	
	@GetMapping("/")
	public String sayHello() {
		return "hello  "+ message;
	}
}






->Aspect Oriented Programming, how it helps, configuration, examples
------------------------------------------------------------------

	Applying logging advice to fund transfer application:

<aop:aspectj-autoproxy />


           <dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
	    </dependency>


@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Loggable {

}


import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
@Component
@Aspect
public class MethodLogger {
	private static final Logger logger=LoggerFactory.getLogger(MethodLogger.class); 
	
  @Around("@annotation(Loggable)")
  public Object around(ProceedingJoinPoint point) throws Throwable {
    long start = System.currentTimeMillis();
    Object result = point.proceed();
    logger.info("Method call takes" +(System.currentTimeMillis() - start));
    return result;
  }
}


// logger.info("start "+MethodSignature.class.cast(point.getSignature()).getMethod().getName()+" is called"+" takes+(System.currentTimeMillis() - start));









->Spring Hibernate

application.properties
----------------------------
server.port=8080
server.servlet.context-path=/bankapp

logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true

spring.datasource.url= jdbc:mysql://localhost:3306/jug?verifyServerCertificate=false&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=create-drop


steps :
0. populate some rec in account table
insert into account(id, balance, name) values (1,100,"A");
insert into account(id, balance, name) values (2,100,"B");
1. annotate pojo

@Entity
public class Account {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	private String name;
	private int balance;

2. create AccountDaoImp using hibernate


@Repository
public class AccountDaoImpUsingHib implements AccountDao{

	@PersistenceContext
	private EntityManager em;
	
	@Override
	public void update(Account account) {
		if(account!=null)
			em.merge(account);
	}

	@Override
	public Account find(int id) {
		return em.find(Account.class, id);
	}

	public List<Account> getAllAccounts(){
		return em.createQuery("from Account", Account.class).getResultList();
	}
}


put @Transactional to service layer...

3.test it



public class DemoApplication implements CommandLineRunner {

	@Autowired
	private AccountService as;
	
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
	/*List<Account> accounts=as.getAllAccounts();
		for(Account a: accounts)
			System.out.println(a.getName());*/

		as.transfer(1, 2, 10);
		System.out.println("done");
	}
	
	
}





Session 2
-----------
Spring rest
-----------
@RestController
public class AccountRestController {

	@Autowired
	private AccountService accountService;

	@RequestMapping(value = "/api/accounts", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Collection<Account>> getAllAccounts() {
		Collection<Account> accounts = accountService.getAllAccounts();
		return new ResponseEntity<Collection<Account>>(accounts, HttpStatus.OK);
	}

	@RequestMapping(value = "/api/accounts/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Account> getAnAccount(@PathVariable Integer id) {
		Account account = accountService.getAccount(id);
		if (account == null) {
			return new ResponseEntity<Account>(HttpStatus.NOT_FOUND);
		}

		return new ResponseEntity<Account>(account, HttpStatus.OK);
	}

	// /api/transfer?from=1&to=2&amount=10
	@RequestMapping(value = "/api/transfer", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Account> transferFund(@RequestParam("from")Integer from, @RequestParam("to") Integer to
			,@RequestParam("amount")Integer amount ) {
		
		accountService.transfer(from, to, amount);
		
		return new ResponseEntity<Account>(HttpStatus.OK);
	}
}


Spring MVC with jsp as view :
----------------------------


Step 1: add dependencies

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
	<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>



Step 2: add to property file

spring.mvc.view.prefix:/WEB-INF/views/
spring.mvc.view.suffix:.jsp




step 3: test with hello controller

@Controller
public class TestController {

	@RequestMapping("/welcome.html")
	public ModelAndView firstPage() {
		return new ModelAndView("welcome");
	}

}

put jsp in /bootapp/src/main/webapp/WEB-INF/views





Now bank application with spring boot jsp
-------------------------------------

create an backing form bean:

public class AccountBean {
	private int from;
	private int to;
	private int money;
}




@Controller
public class AccountController {

	@Autowired
	private AccountService service;

	@RequestMapping(value = "/transfer", method = RequestMethod.GET)
	public String showAccountTransferForm(ModelMap map) {
		
		map.addAttribute("accountBean", new AccountBean());
		return "accountform";
	}

	@RequestMapping(value = "/transfer" ,method = RequestMethod.POST)
	public ModelAndView submittedAccountTransferForm(AccountBean accountBean) {
		
		service.transfer(accountBean.getFrom(), accountBean.getTo(), accountBean.getMoney());
		return new ModelAndView("transfersuccess", "accountBean", accountBean);
	}
}



view layer:
------------
accountform.jsp
-----------------

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"  %>

<form:form action="transfer" method="post" modelAttribute="accountBean">
	Enter from account:<form:input path="from"/><br/>
	Enter to amount:<form:input path="to"/><br/>
	Enter money to transfer:<form:input path="money"/><br/>
	<input type ="submit"/>
</form:form>




transfersuccess.jsp
-----------------
${accountBean.from }<br/>
${accountBean.to }<br/>
${accountBean.money }<br/>




Spring security configuration with spring boot:
-----------------------------------------------
why not tomcat/weblogic security?
-----------------------------------------

Spring provide: url , method and object level security



Configuration hello world:
--------------------------

spring.security.user.name=raj
spring.security.user.password=raj

