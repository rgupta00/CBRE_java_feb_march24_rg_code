Spring data with spring boot:
---------------------------

1. hello world
2. CURD operation
3. turning off repo definations
4. derived quaries from method names
5. relational, logical, date related,containing checking quaries
6. JPQL data with spring data, Sort quaries result using method arguments
7. pagination
8. joins


Depdendencies: web,jpa, mysql

spring.jpa.hibernate.ddl-auto=update
logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true

spring.datasource.url= jdbc:mysql://localhost:3306/data
spring.datasource.username=root
spring.datasource.password=root




@Entity
public class Book {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long bookId;
	private String title;
	private Date publishDate;
	private int pageCount;
	private double price;
}


public interface BookRepo extends JpaRepository<Book, Long> {

}




@SpringBootApplication
public class SpringDataApplication implements CommandLineRunner {

	@Autowired
	private BookRepo repo;
	
	public static void main(String[] args) {
		SpringApplication.run(SpringDataApplication.class, args);
	}

	@Override
	public void run(String... arg0) throws Exception {
		repo.save(new Book("java is fun", new Date(), 300, 340));
		repo.save(new Book("java is fun", new Date(), 300, 340));
	}
}




CURD operation
-------------
	-> adding records

		use repository.save(books) it can be used to save book one by one and in one go!



	-> deleting records

		repository.delete(1L);
		
		repository.delete(repository.findOne(2L));
		
		repository.delete(repository.findAll(new ArrayList<Long>(){{
			add(3L);
			add(4L);
		}}));

		repository.deleteInBatch(repository.findAll(new ArrayList<Long>(){{
			add(5L);
			add(6L);
		}}));
		
		repository.deleteAll();
		
		repository.deleteAllInBatch();



	-> update records

		Book book repository.findOne(1L);
		//...change book
		book.setTitle("java in action");
		repository.save(book);
		System.out.println(repository.findOne(1L));



	-> retriving records

		List<Book> books = repository.findAll(new ArrayList<Long>(){{
			add(1L);
			add(3L);
			add(7L);
		}});

		for(Book book:books){
			System.out.println(book);
		}




		
3. turning off repo definations
----------------------------------


	-> lets say our requirment is to create an safe repo, only for reading purpose

	-> use @NoRepositoryBean, Spring jpa will only give implementation for methods that are mentioned in interface!


	@NoRepositoryBean
	public interface ReadOnlyRepository<T,ID extends Serializable> extends Repository<T, ID> {

		T findOne(ID id);
		Iterable<T> findAll();
	}




4. derived quaries from method names
-----------------------------------
	-> Spring Data can derived quaries based on method name declared into the repo interface


class Person{

	private firstName;

}


	Ex:
		public interface PersonRepository extends CrudRepository<Person, String>{
				public List<Person>findByFirstName(String firstName);
		}

		=> Quary generated:
			select p from Person p where p.firstName=?



Agenda:
-------
	How derived queries are constructed?

	keyword used to construct specific constraints

	define ordering for result sets

	limit result set sizes

	create constrainits that transverse nested properties




How derived queries are constructed? and hello world
-----------------------------------------------------


	String comparision methods:
	---------------------------



	@Repository
	public interface BookRepository extends JpaRepository<Book, Long> {
	
		//Spring data inspect method sign and find findBy keyword
		//query builder in background remove findBy and inspect next portion "title" (title of POJO)
		//using this infor spring data enable to construct quaries....


		public Book findByTitle(String title);
	}


		
		Book book=repository.findByTitle("Java 8 in action");
		System.out.println(book);



	More examples:
	-------------


	public List<Book> findByTitle(String title);
	
	public List<Book> findByTitleLike(String title);

	public List<Book> findByTitleContaining(String title);
	
	public List<Book> findByTitleStartingWith(String title);
	
	public List<Book> findByTitleEndingWith(String title);

	public List<Book> findByTitleIgnoreCase(String title);
	


	testing :
	---------
	List<Book> books=repository.findByTitleEndingWith("action");
		for(Book b: books)
			System.out.println(b.getTitle());






	relational comparision methods in derived quaries
	----------------------------------------------------

	public List<Book> findByPageCountEquals(int pageCount);

	public List<Book> findByPageCountGreaterThan(int pageCount);

	public List<Book> findByPageCountLessThan(int pageCount);

	public List<Book> findByPageCountGreaterThanEqual(int pageCount);

	public List<Book> findByPageCountLessThanEqual(int pageCount);

	public List<Book> findByPageCountBetween(int min, int max);


	testing:
	---------

		for(Book b:repository.findByPageCountBetween(160, 220)){
			System.out.println(b);
		}












	Logical operator in derived quaries (or not and)
	-------------------------------------
	public List<Book> findByTitleContainingOrTitleContaining(String title, String title2);

	public List<Book> findByTitleContainingAndPageCountGreaterThan(String title, int pageCount);
	
	public List<Book> findByTitleNot(String title);




		for(Book b:repository.findByTitleNot("Head first")){
			System.out.println(b);
		}





	Date comparision in spring data
	------------------------------

	public List<Book> findByPublishDateAfter(Date date);

	public List<Book> findByPublishDateBefore(Date date);

	public List<Book> findByPublishDateBetween(Date date,Date date2);


	Date date = new SimpleDateFormat("MM/dd/yyyy").parse("10/22/1995");
		Date date2 = new SimpleDateFormat("MM/dd/yyyy").parse("10/22/1997");
		for(Book b:repository.findByPublishDateBetween(date,date2)){
			System.out.println(b);
		}






	Quaries to check containing
	------------------------------

	public List<Book> findByTitleContainingOrderByTitleAsc(String title);

	public List<Book> findByTitleContainingOrderByTitleDesc(String title);

	public List<Book> findTopByOrderByPageCountDesc();// find top book


		 
	public List<Book> findTopByOrderByPageCountDesc();
		
	public List<Book> findFirstByOrderByPageCountAsc();
		
	public List<Book> findTop5ByOrderByPriceDesc(); //top 5 costly books....
		

		for(Book b:repository.findByTitleContainingOrderByTitleDesc("a")){
			System.out.println(b);
		}





6. JPQL data with spring data, Sort quaries result using method arguments
--------------------------------------------------------------------------

	Manually assigning an quaries	@Query
	-------------------------------

	@Query("select b from Book b")
	public List<Book> queryOne();

	@Query("select b from Book b where b.pageCount > ?1")
	public List<Book> queryTwo(int pageCount);

	@Query("select b from Book b where b.title = :title")
	public List<Book> queryThree(@Param("title") String title);




	testing:
	---------

		for(Book b:repository.queryThree("head first")){
			System.out.println(b);
		}





	Named Quaries
	---------------

	Demo:

	@NamedQueries({@NamedQuery(name="Book.queryOne", query="select b from Book b"),
	@NamedQuery(name="Book.queryTwo", query="select b from Book b where b.pageCount > ?1"),
	@NamedQuery(name="Book.queryThree", query="select b from Book b where b.title = :title")})
	public class Book {

	......
	}



	Note: Quary name Book.queryOne corrosponding to method named queryOne() of Book class
	public List<Book> queryOne(); 

	.....



	testing:
	---------

		for(Book b:repository.queryThree("head first")){
			System.out.println(b);
		}








7. pagination (sub set of large set)
--------------

	=> Pagination is imp tech for large result set to displayed to a web page
	=> breading down larger data set to sub set... pagination
	=> serch engine


	Spring provide paging and sorting repo out of the box....contain several method to support pagination


	Hello World:
	to see record of page one (0 for first page) and three records
	to see record of page two (1 for first page) and three records


	for(Book b:repository.findByPageCountGreaterThan(150, new PageRequest(0,3))){
		System.out.println(b);
	}



	ex:
	for(Book b:repository.findAll(new PageRequest(0,3))){
		System.out.println(b);
	}


	Or  we can defind an new method in repo:
	---------------------------------------
	@Repository
	public interface BookRepository extends JpaRepository<Book, Long> {

		public List<Book> findByPageCountGreaterThan(int pageCount, Pageable pageable);
	}




	Sorting records:
	----------------
	Sorting using Spring JPA is very easy:

	Getting book sorted as per pageCount
	----------------------------------
	for(Book b:repository.findAll(new Sort("pageCount"))){
			System.out.println(b);
		}


	Getting book sorted as per pageCount (DESC order)
	---------------------------------------------

		for(Book b:repository.findAll(new Sort(Sort.Direction.DESC,"pageCount"))){
			System.out.println(b);
		}


	Getting sorted first sort Book as per aurthor lastName and then as per pageCount
	-------------------------------------------------------------------------------------
			
		for(Book b:repository.findAll(new Sort(Sort.Direction.ASC, "author.lastName", "pageCount"))){
			System.out.println(b);
		}


	Getting more customization
	-------------------------------------------------------------------------------------
	
		for(Book b:repository.findAll(new Sort(Sort.Direction.ASC,"author.lastName").and(new Sort(Sort.Direction.DESC,"pageCount")))){
			System.out.println(b);
		}


	Alternative:
	==============

	@Repository
	public interface BookRepository extends JpaRepository<Book, Long> {

		public List<Book> findByPageCountGreaterThan(int pageCount, Sort sort);
	}


		for(Book b:repository.findByPageCountGreaterThan(220, new Sort("author.firstName"))){
			System.out.println(b);
		}



	Return type for query method:
	-----------------------------
	=> till now we have just return List<Book> 
	we can return other type too....like page result


	@Repository
	public interface BookRepository extends JpaRepository<Book, Long> {

		public Page<Book> findByPageCountGreaterThan(int pageCount, Pageable pageable);
	}


	Using it:
	----------
	Page page=repository.findByPageCountGreaterThan(120, new PageRequest(0,3));



	for (Book b : repository.findByPageCountGreaterThan(120, new PageRequest(0,3))) {
		System.out.println(b);
	}


	Imp methods of page:
	------------------------
	//getTotalPages()		-- how many pages ?
	// getTotalElementMethod()	-- how many result available with subset?


	Slice?
	-----

	@Repository
	public interface BookRepository extends JpaRepository<Book, Long> {

		public Slice<Book> findByPageCountGreaterThan(int pageCount, Pageable pageable);
	}



	How to use?
	---------
	Slice slice = repository.findByPageCountGreaterThan(120, new PageRequest(0,3));
	
	More efficient then Page, but do not give imp inventory information such as getTotalPages()






Query by example executor:
------------------------
This is interface that allow query execution by example

findAll(Example<S> example)

What is this example?
	example need probe to get created, and this prob means instance of domain class
Query by example is a concept or apporach where we create query based on example given

QueryByExampleExecutor will take example object and it will 
generate query based on that using example matcher

{
	"title":"java"
}

Hello world:
------------
@GetMapping(path = "byexample", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Book> getAllBooksByExample(@RequestBody Book book) {
		List<Book> books = bookService.getAllBooksByExample(book);
		return books;
	}


service:
-------
public List<Book> getAllBooksByExample(Book book);

service implementation:
--------------------

public List<Book> getAllBooksByExample(Book book) {
		// pass prob to example
		Example<Book> e = Example.of(book);

		return bookRepo.findAll(e);
}


Example:
// pass prob to example
		ExampleMatcher exampleMatcher=ExampleMatcher.matchingAny().withIgnoreCase()
				.withMatcher("title",GenericPropertyMatcher.of(StringMatcher.STARTING));
		Example<Book> e = Example.of(book, exampleMatcher);

		return bookRepo.findAll(e);



https://www.baeldung.com/spring-data-query-by-example





Joins:
---------

one to one:
-------------
Employee ------------<>-------- Parking




Effect of auto gen strategy:
----------------------------
If IDENTITY:
------------
every table are independt in terms of serogative pk 

em.persist(emp);

If TABLE(Auto) in hib 5
--------------
every enitity serogative pk are generate with the help of a table

pk_table:
----------
	val
	2


em.persist(emp);

commit

saved....
Hibernate: insert into customer_table_jpa (address, dob, email, mobile, name, id) values (?, ?, ?, ?, ?, ?)
commited....


























@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int eid;





POJO:
------

public class Employee {
	private int eid;
	private String name;
	private double salary;

	private Parking parking;
}


public class Parking {
	private int pid;
	private String loc;
	private Employee employee;
}



Entities:
-----------

@Entity
@Table(name = "emp_table")
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int eid;
	private String name;
	private double salary;

	@OneToOne(mappedBy = "employee", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private Parking parking;

}


@Entity
@Table(name = "parking_table")
public class Parking {
	
	@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
	private int pid;
	private String loc;
	
	@JoinColumn(name = "eid_fk")
	@OneToOne
	private Employee employee;
}



Repository:
------------
@Repository
public interface EmployeeRepo extends JpaRepository<Employee, Integer>{

}

@Repository
public interface ParkingRepo extends JpaRepository<Parking, Integer>{
}




populate some data:
--------------------
		Parking parking1=new Parking("A34");
		Parking parking2=new Parking("Mw6");
		Parking parking3=new Parking("F40");
		
		
		Employee emp1=new Employee("ekta", 4000.00, parking1);
		Employee emp2=new Employee("keshav", 7000.00, parking2);
		Employee emp3=new Employee("gunika", 3400.00, parking3);
		
		parking1.setEmployee(emp1);
		parking2.setEmployee(emp2);
		parking3.setEmployee(emp3);
		
		empRepo.save(emp1);
		empRepo.save(emp2);
		empRepo.save(emp3);
		
		parkingRepo.save(parking1);
		parkingRepo.save(parking2);
		parkingRepo.save(parking3);





one to many:
-------------
Department <>-------- Employee

Pojo:
--------

public class Department {
	private int did;
	private String dname;

	private List<Employee>employees=new ArrayList<>();
}


public class Employee {
	private int eid;
	private String name;
	private double salary;

	private Department department;
}





Entities:
--------

@Entity
@Table(name = "dept_table")
public class Department {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int did;
	
	private String dname;
	
	
	@OneToMany(mappedBy = "department", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private List<Employee>employees=new ArrayList<>();
}


@Entity
@Table(name = "empdept_table")
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int eid;
	private String name;

	private double salary;

	@JoinColumn(name = "did_fk")
	@ManyToOne
	private Department department;

}


Initilizing data:
-----------------

		Department d1=new Department("fin");
		Department d2=new Department("IT");
		Department d3=new Department("sales");
		
		Employee emp1=new Employee("ravi", 6000.00, d1);
		Employee emp2=new Employee("ekta", 4000.00, d1);
		
		Employee emp3=new Employee("keshav", 7000.00, d2);
		Employee emp4=new Employee("gunika", 3400.00, d2);
		
		Employee emp5=new Employee("raj", 7800.00, d3);
		
		//dept 1 have 1,2 emps
		d1.getEmployees().add(emp1);
		d1.getEmployees().add(emp2);
		
		
		d2.getEmployees().add(emp3);
		d2.getEmployees().add(emp4);
		
		d3.getEmployees().add(emp5);
		
		deptRepo.save(d1);
		deptRepo.save(d2);
		deptRepo.save(d3);
		
		empRepo.save(emp1);
		empRepo.save(emp2);
		empRepo.save(emp3);
		empRepo.save(emp4);
		empRepo.save(emp5);





Repositories:
-------------

dname ename salary


@Repository
public interface DepartmentRepo extends JpaRepository<Department, Integer>{
	@Query("SELECT new com.demo.dto.DeptEmpResponse(d.dname, e.name, e.salary) FROM Department d INNER JOIN d.employees e")
	List<DeptEmpResponse> deptEmployeeInformation();
}


@Repository
public interface EmployeeRepo extends JpaRepository<Employee, Integer>{
	@Query("SELECT e FROM Employee e WHERE e.eid IN (:eid)")
	public List<Employee> findEmployeessByIds(@Param("eid") List<Integer> eid);
}



Requst/response DTO:
----------------------


@JsonIgnoreProperties({"rank","location"})
public class DeptEmpResponse {
	private String dname;
	private String name;
	private double salary;
	//@JsonIgnore
	private int rank;
	//@JsonIgnore
	private String location;
}


public class EmployeeRequest {
	private List<Integer> ids;
}


{
  "ids":  [1,5]
}

Exception:
---------
public class ResourceNotFoundException extends RuntimeException{
}


Controllers:
------------


@RestController
public class DeptartmentRestController {

	private DepartmentRepo deptRepo;

	@Autowired
	public DeptartmentRestController(DepartmentRepo deptRepo) {
		this.deptRepo = deptRepo;
	}
	
	@GetMapping(path = "department", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Department> getAllDepartments(){
		List<Department> departments=deptRepo.findAll();
		return departments;
	}
	
	
	@GetMapping(path = "department/{did}", produces = MediaType.APPLICATION_JSON_VALUE)
	public Department getAnDepartment(@PathVariable(name="did") int did){
		 Department department=deptRepo.findById(did).orElseThrow(ResourceNotFoundException::new);
		return department;
	}
}




@RestController
public class EmployeeRestController {

	@Autowired
	private DepartmentRepo deptRepo;

	@Autowired
	private EmployeeRepo empRepo;

	@GetMapping(path = "employee", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Employee> getAllEmp() {
		List<Employee>employees=empRepo.findAll();
		return employees;
	}

	@GetMapping(path = "selectedemployee", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Employee> getSelectedEmp(@RequestBody EmployeeRequest employeeRequest) {
		List<Employee>employees=empRepo.findEmployeessByIds(employeeRequest.getIds());
		return employees;
	}
	
	@GetMapping(path = "empinfo", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<DeptEmpResponse> getAllEmployeesWithDeptName() {
		List<DeptEmpResponse> empsWithDeptNames = deptRepo.deptEmployeeInformation();
		return empsWithDeptNames;
	}

}


Problem: recursion :
---------------------
	one to one

	one to many

	many to many


Solving Infinite Recursion using @JsonManagedReference and @JsonBackReference
---------------------------------------------------------------------

	 @JsonManagedReference:
			 is used on the OneToMany side 
			 it is the forward part of the mapping/reference and the data gets serialized normally.

	@JsonBackReference :
			is used at the @ManyToOne side
			@JsonBackReference is is the backward side of the mapping and the data  does not get serialized
 

	Steps:
	 Add @JsonManagedReference to the getPosts method in the User entity
	 Add @JsonBackReference to the getUser method of the Post entity
	Add @JsonManagedReference to the getUsers method of the Location entity
	@JsonBackReference to the getLocation method of the User entity




 @JsonIdentifyInfo and @JsonIgnore
-------------------------------------

	@JsonIgnore 
		it is an alternative  for the @JsonBackReference. 
		So we can used @JsonIgnore in place of @JsonBackReference

	@JsonIdentityInfo 
		it can be used in place of the both @JsonManagedReference and @JsonBackReference. 
		@JsonIdentityInfo annotation is added to the class and NOT to the methods. 
	
	Also, the @JsonIdentityInfo requires some attributes as shown in the code below:

	@JsonIdentityInfo(
	generator = ObjectIdGenerators.PropertyGenerator.class, 
	property = "id")



public interface DepartmentRepository extends JpaRepository<Department, Integer> {

	@Query("SELECT new new demo.EmpDataResponse(d.name, e.name, e.salary) FROM Department d INNER JOIN d.employees e")
	List<EmpDataResponse> deptEmployeeInformation();

}


EmpDataResponse{
private String dname;
private String name;
private double salary;
}

dname enam ,salary

public class Department {
	//
	private String dname;
	private List<Employee>employees=new ArrayList<>();


public class Employee {
	
	private int eid;
	private String name;
	private double salary;

	private Department department;



Ref:
-----
https://www.appsdeveloperblog.com/infinite-recursion-in-objects-with-bidirectional-relationships/



Spring boot join: many to many
---------------------------------
	N		M
Employee--------- <>------- Project


POJO:
------
public class Employee {
	private int eid;
	private String name;
	private double salary;

	private List<Project> projects=new ArrayList<>();
}

public class Project {
	private int pid;
	private String pname;
	private String manager;
	private LocalDate startDate;
	
	private List<Employee> employees=new ArrayList<>();
}




Entities:
--------
@Entity
@Table(name = "emp_proj_table")
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int eid;
	private String name;
	private double salary;

	@ManyToMany(mappedBy = "employees", cascade = CascadeType.ALL)
	private List<Project> projects=new ArrayList<>();
}



@Entity
@Table(name = "project_table")
public class Project {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int pid;
	private String pname;
	private String manager;
	private LocalDate startDate;
	
	
	@JoinTable(name="emp_project_join", joinColumns = @JoinColumn(name="pid_fk"), 
			inverseJoinColumns = @JoinColumn(name="eid_fk"))
	@ManyToMany(cascade = CascadeType.ALL)
	private List<Employee> employees=new ArrayList<>();
}



Data init:
-------
Employee emp1 = new Employee("sunita", 4000.00);
		Employee emp2 = new Employee("keshav", 7000.00);
		Employee emp3 = new Employee("gunika", 3400.00);
		
		
		Employee emp4 = new Employee("anil", 3400.00);
		Employee emp5 = new Employee("sumit", 7900.00);
		Employee emp6 = new Employee("umesh", 5600.00);
		
		
		
		Employee emp7 = new Employee("vikas", 4000.00);
		Employee emp8 = new Employee("neetu", 7000.00);
		Employee emp9 = new Employee("kapil", 3400.00);
		
	
		Project project1=new Project("shopping cart", "raj", LocalDate.of(2021, Month.JANUARY, 2));
		Project project2=new Project("bank app", "ekta", LocalDate.of(2020, Month.NOVEMBER, 22));
		Project project3=new Project("bookstore", "indu", LocalDate.of(2020, Month.DECEMBER, 12));
		
		project1.getEmployees().add(emp1);
		project1.getEmployees().add(emp2);
		project1.getEmployees().add(emp3);
		
		project2.getEmployees().add(emp4);
		project2.getEmployees().add(emp5);
		project2.getEmployees().add(emp6);
		
		project3.getEmployees().add(emp7);
		project3.getEmployees().add(emp8);
		project3.getEmployees().add(emp9);
		

		emp1.getProjects().add(project1);
		emp2.getProjects().add(project1);
		emp3.getProjects().add(project1);
		
		
		emp4.getProjects().add(project2);
		emp5.getProjects().add(project2);
		emp6.getProjects().add(project2);
		
		emp7.getProjects().add(project3);
		emp8.getProjects().add(project3);
		emp9.getProjects().add(project3);

		projectRepo.save(project1);
		projectRepo.save(project2);
		projectRepo.save(project3);
		
		
		
		empRepo.save(emp1);
		empRepo.save(emp2);
		empRepo.save(emp3);
		
		empRepo.save(emp4);
		empRepo.save(emp5);
		empRepo.save(emp6);
		
		
		empRepo.save(emp7);
		empRepo.save(emp8);
		empRepo.save(emp9);
		



Repo:
-----
@Repository
public interface EmployeeRepo extends JpaRepository<Employee, Integer>{

}

@Repository
public interface ProjectRepo extends JpaRepository<Project, Integer>{

}



https://roytuts.com/spring-data-jpa-namedquery-and-namedqueries-example/
https://roytuts.com/spring-boot-data-jpa-left-right-inner-and-cross-join-examples/
