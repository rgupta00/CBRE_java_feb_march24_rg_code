
Discussion Spring boot jpa joins:
______________________________
Relationship bw the object (joins in databses)



step 1: Create spring boot app: spring mvc, jpa, mysql 
______________________

step 2: property file
______________________

server.port=8090
spring.datasource.url=jdbc:mysql://localhost:3306/infy1?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


spring.jpa.hibernate.ddl-auto=update

logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true


one to one :
_____________
		1		1
	Employee<>-----------Parking

	uni directional 
	bi direactional


	public class Parking {

		private int partingId;
		private String parkingLocation;
	
		private Employee employee;
	}
	
	public class Employee {
		private int empId;
		private String empName;

		private Parking parking;

	}


one to one bi directinal:
_________________________

		Employee employee1 = new Employee("sumit");
		Employee employee2 = new Employee("ekta");
		Employee employee3 = new Employee("gun");
		Employee employee4 = new Employee("keshav");
		Employee employee5 = new Employee("vikas");

		Parking parking1 = new Parking("A12");
		Parking parking2 = new Parking("M2");
		Parking parking3 = new Parking("B2");
		Parking parking4 = new Parking("T11");
		Parking parking5 = new Parking("U12");

		parking1.setEmployee(employee1);
		parking2.setEmployee(employee2);
		parking3.setEmployee(employee3);
		parking4.setEmployee(employee4);
		parking5.setEmployee(employee5);
		
		employee1.setParking(parking1);
		employee2.setParking(parking2);
		employee3.setParking(parking3);
		employee4.setParking(parking4);
		employee5.setParking(parking5);
		
		

		session.persist(parking1);
		session.persist(parking2);
		session.persist(parking3);
		session.persist(parking4);
		session.persist(parking5);




one to many data:
____________________

public class Department{
	
		private int deptId;
		private String deptName;
	
		private Collection<Employee> employees = new ArrayList<Employee>();
}

public class Employee {
	
		private int empId;
		private String empName;
	
		private Collection<Project> projects = new ArrayList<Project>();
}





			Department department1=new Department("IT");
			Department department2=new Department("sales");
			Department department3=new Department("mkt");
			Department department4=new Department("r&d");
			
			Employee employee1=new Employee("raja");
			Employee employee2=new Employee("amit");
			Employee employee3=new Employee("sumit");
			Employee employee4=new Employee("ekta");

			Employee employee5=new Employee("keshav");
			Employee employee6=new Employee("gunika");
			Employee employee7=new Employee("rajiv");
			
			department1.getEmployees().add(employee1);
			department1.getEmployees().add(employee2);
			
			department2.getEmployees().add(employee3);
			department2.getEmployees().add(employee4);
			
			department3.getEmployees().add(employee5);
			department3.getEmployees().add(employee6);
			department3.getEmployees().add(employee7);
			
			employee1.setDepartment(department1);
			employee2.setDepartment(department1);
			
			
			employee3.setDepartment(department2);
			employee4.setDepartment(department2);
			
			employee5.setDepartment(department3);
			employee6.setDepartment(department3);
			employee7.setDepartment(department3);
			
			
			
			session.save(department1);
			session.save(department2);
			session.save(department3);
			
			session.save(employee1);
			session.save(employee2);
			session.save(employee3);	
			session.save(employee4);
			session.save(employee5);
			session.save(employee6);
			session.save(employee7);



Many to many relationship:
__________________________

public class Employee {
		private int empId;
		private String empName;
		private Collection<Project> projects = new ArrayList<Project>();
}


	public class Project {
		private int projectId;
		private String projectName;
		private List<Employee> employees = new ArrayList<Employee>();
}



		Employee employee1 = new Employee("raja");
		Employee employee2 = new Employee("amit");

		Employee employee3 = new Employee("sumit");
		Employee employee4 = new Employee("ekta");

		Employee employee7 = new Employee("rajiv");
		Employee employee8 = new Employee("nitin");

		Project project1 = new Project("proj A");
		Project project2 = new Project("proj B");

		Project project3 = new Project("proj C");
		Project project4 = new Project("proj D");

		project1.getEmployees().add(employee1);
		project1.getEmployees().add(employee3);

		project2.getEmployees().add(employee1);
		project2.getEmployees().add(employee3);
		project2.getEmployees().add(employee4);

		project3.getEmployees().add(employee2);
		project3.getEmployees().add(employee3);
		project3.getEmployees().add(employee4);

		project4.getEmployees().add(employee2);
		project4.getEmployees().add(employee4);

		employee1.getProjects().add(project1);
		employee1.getProjects().add(project2);

		employee2.getProjects().add(project3);
		employee2.getProjects().add(project4);

		employee3.getProjects().add(project1);
		employee3.getProjects().add(project2);
		employee3.getProjects().add(project3);

		employee4.getProjects().add(project4);
		employee4.getProjects().add(project2);
		employee4.getProjects().add(project3);

		
		session.save(project1);
		session.save(project2);
		session.save(project3);
		session.save(project4);

		session.save(employee1);
		session.save(employee2);
		session.save(employee3);
		session.save(employee4);
		
		




public List<Object[]> getCustomerNameAndDob()
public String getCustomerName();


SELECT c FROM Customer c WHERE c.customerId = 1002

SELECT c FROM Customer c WHERE c.city != 'Delhi'

SELECT c FROM Customer c WHERE c.dateOfBirth >= '1-Jan-1980'

SELECT c FROM Customer c WHERE c.dateOfBirth <= '1-Jan-1980'

SELECT c FROM Customer c WHERE c.dateOfBirth BETWEEN '1-Jan-1975' AND '1-Jan-1980'

SELECT c FROM Customer c WHERE c.name LIKE 'R%'

SELECT c FROM Customer c WHERE c.emailId IS NULL

SELECT c FROM Customer c WHERE c.city IN ('Delhi','Banglore')

SELECT c FROM Customer c WHERE c.loans IS EMPTY

SELECT c FROM Customer c WHERE c.loans IS NOT EMPTY

SELECT c FROM Customer c WHERE SIZE(c.loans) > 2

Query query = entityManager.createQuery("DELETE FROM Account a WHERE a.status = 'INACTIVE'"); 
int updatedEntities = query.executeUpdate();

Query query = entityManager.createQuery("UPDATE Customer c SET c.city = 'Seatle' where c.customerId = 1002");
int updatedEntities = query.executeUpdate();

@Entity
public class Account {
	@Id
	private Integer accountNumber;
	private String accountType;
	private LocalDate openingDate;
	private Integer balance;
	private String accountStatus;
}

SELECT AVG(a.balance) FROM Account a
The following query returns the total balance of all the accounts:

SELECT SUM(a.balance) FROM Account a
The following query returns the total number of account:

SELECT COUNT(a) FROM Account a
The following query returns the minimum balance of account:

SELECT MIN(a.balance) FROM Account a
The following query returns the maximum balance of account:

SELECT MAX(a.balance) FROM Account a


@Entity
public class Customer {
	@Id
	private Integer customerId;
	private String emailId;
	private String name;
	private LocalDate dateOfBirth;
	private String city;
}
SELECT c.city, COUNT(c) FROM Customer c GROUP BY c.city

SELECT c.city, COUNT(c) FROM Customer c GROUP BY c.city HAVING c.city IN ('Delhi','Banglore')

SELECT c FROM Customer c ORDER BY c.name ASC


UPDATE Customer c SET c.city = 'Seatle' where c.customerId = 1002;

Query query = entityManager.createQuery("UPDATE Customer c SET c.city = 'Seatle' where c.customerId = 1002");
int updatedEntities = query.executeUpdate();

DELETE FROM Account a WHERE a.status = 'INACTIVE'

Query query = entityManager.createQuery("DELETE FROM Account a WHERE a.status = 'INACTIVE'"); 
int updatedEntities = query.executeUpdate();


@Entity
public class Customer {
	@Id
	private Integer customerId;
	private String emailId;
	private String name;
	private LocalDate dateOfBirth;
}


public interface CustomerRepository extends CrudRepository<Customer, Integer> {
	Optional<Customer> findByEmailId(String emailId);

	Optional<Customer> findByEmailIdAndName(String emailId, String name);

	List<Customer> findByEmailIdOrName(String emailId, String name);

	List<Customer> findByDateOfBirthBetween(LocalDate fromDate, LocalDate toDate);

	List<Customer> findByDateOfBirthLessThan(LocalDate dateOfBirth);

	List<Customer> findByDateOfBirthGreaterThan(LocalDate dateOfBirth);

	List<Customer> findByDateOfBirthAfter(LocalDate dateOfBirth);

	List<Customer> findByDateOfBirthBefore(LocalDate dateOfBirth);

	List<Customer> findByEmailIdNull();

	List<Customer> findByNameLike(String pattern);

	List<Customer> findByNameOrderByDateOfBirth(String name);

	List<Customer> findByNameOrderByDateOfBirthDesc(String name);
}


public interface CustomerRepository extends CrudRepository<Customer, Integer> {

	String findNameByEmailId(@Param("emailId") String emailId);

	@Query("SELECT c.name FROM Customer c WHERE c.emailId = :emailId")
	String findNameByEmailId(@Param("emailId") String emailId);

	@Query("UPDATE Customer c SET c.emailId = :emailId WHERE c.customerId = :customerId")
	@Modifying
	@Transactional
	Integer updateCustomerEmailId(@Param("emailId") String updateCustomerByEmailId, @Param("customerId") Integer customerId);
	@Query("DELETE FROM Customer c WHERE c.emailId = :emailId")

	@Modifying
	@Transactional
	Integer deleteCustomerByEmailId(@Param("emailId") String emailId); //Integer how many rows effected
}

List<Product> products = IntStream.rangeClosed(1, 200)
                .mapToObj(i -> new Product("product" + i, new Random().nextInt(100), new Random().nextInt(50000)))
               .collect(Collectors.toList());
        repository.saveAll(products);


@Entity
public class Product {
    @Id
    @GeneratedValue
    private  int id;
    private String name;
    private int quantity;
    private long price;
}

 public List<Product> findProductsWithSorting(String field){
        return  repository.findAll(Sort.by(Sort.Direction.ASC,field));
    }


    public Page<Product> findProductsWithPagination(int offset,int pageSize){
        Page<Product> products = repository.findAll(PageRequest.of(offset, pageSize));
        return  products;
    }

    public Page<Product> findProductsWithPaginationAndSorting(int offset,int pageSize,String field){
        Page<Product> products = repository.findAll(PageRequest.of(offset, pageSize).withSort(Sort.by(field)));
        return  products;
    }



IDENTITY strategy
TABLE strategy
SEQUENCE strategy
AUTO strategy


---------------one to one-------------------

@Entity
public class Address {
	@Id
	private Long addressId;
	private String street;
	private String city;
}

@Entity
public class Customer {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer customerId;
	private String emailId;
	private String name;
	private LocalDate dateOfBirth;
	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "address_id", unique = true)
	private Address address;
	//getter and setter
}

---------------many one one-------------------
@Entity
public class Customer {
	@Id
	private Integer customerId;
	@Column(name="emailid")
	private String emailId;
	private String name;
	private LocalDate dateOfBirth;
    //getter and setter methods
}

@Entity
public class Loan{
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer loanId;
	private Double amount;
	private LocalDate issueDate;
	private String status;
	@ManyToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="cust_id")
	private Customer customer;
	
    //getter and setter methods
}

---------------one to many-------------------
@Entity
public class Customer{
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer customerId;
	private String emailId;
	private String name;
	private LocalDate dateOfBirth;
	@OneToMany(cascade=CascadeType.ALL)
	@JoinColumn(name="cust_id")
	private List<Card> cards; 
    //getter and setter methods
}

@Entity
public class Card {
	@Id
	private Integer cardId;
	private String cardNumber;
	private LocalDate expiryDate;   
    // getter and setter methods
}


One – to – One Relationship

One – to – Many Relationship

Many – to – One Relationship

Many – to – Many Relationship (not covered as part of this course)

Let's start with one – to – one relationship.



@Entity
public class Service{
	@Id
	private Integer serviceId;
	private String serviceName;
	private Integer serviceCost;
	
    //getter and setter methods
}

@Entity
public class Customer{
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer customerId;
	@Column(name="emailid")
	private String emailId;
	private String name;
	private LocalDate dateOfBirth;
	
	@ManyToMany(cascade=CascadeType.ALL)
	@JoinTable(name="customer_service",joinColumns=@JoinColumn(name="cust_id"),inverseJoinColumns=@JoinColumn(name="serv_id"))
	private Set<Service> bankServices;
}





