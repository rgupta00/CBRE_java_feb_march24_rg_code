How to invoke microservices:
____________________________

http://localhost:8082/productapp/products/2
http://localhost:8085/couponapp/coupons/SUP10
http://localhost:8081/customerapp/customers/5


http://localhost:8080/orderapp/orders

Post method with body:

{
        "cid" :1,
	    "pid": 2,
	    "qty": 3,
	    "discountCoupon":"SUP10"
}

response:

{
    "id": "84b535ce-5bae-415c-aea0-b5c4b1fb5f0d",
    "totalAmount": 189000.0,
    "orderDate": "2022-05-20",
    "customer": {
        "id": 1,
        "name": "ravi",
        "email": "ravi@gmail.com"
    },
    "product": {
        "id": 2,
        "name": "laptop",
        "price": 70000.0
    }
}




Microservice project Configuration :
___________________________________

eureka server and client configuration:
_______________________________________



step 1: configure eureka server
__________________________________

1. create spring boot project : devtools, actuator, eureka server 
2. apply annotation : 

	@EnableEurekaServer

3. configuration: put in properties files
______________________________
eureka.instance.hostname=localhost
server.port=8761
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

spring.application.name=eurekaserver
spring.config.import=optional:configserver:http://localhost:8071/
spring.cloud.loadbalancer.ribbon.enabled=false

application.yml:
________________
server:
  port: 8761
eureka:
  instance:
    hostname: localhost
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      
spring:
  application:
    name: eurekaserver
  config:
    import:
    - optional:configserver:http://localhost:8071/
  cloud:
    loadbalancer:
      ribbon:
        enabled: false




step 2: configure Coupon service
__________________________________

1. create spring boot project : devtools, actuator, eureka client 
2. apply annotation :
		 @EnableEurekaClient 
		@EnableDiscoveryClient

	on client main bootstrap class


3. configuration: put in properties files
______________________________
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka/
spring.application.name=coupon-app
server.port=8181
management.endpoints.web.exposure.include=*


yml configuration:
__________________

server:
  servlet:
    context-path: /couponapp
  port: 8085
spring:
  application:
    name: coupon-app
logging:
  level:
    org.springframework.web:  DEBUG
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: "*"





step 3: configure customer service
__________________________________

1. create spring boot project : devtools, actuator, eureka client 
2. apply annotation : @EnableEurekaClient on client main bootstrap class

yml configuration:
__________________
server:
  servlet:
    context-path: /customerapp
  port: 8081
spring:
  application:
    name: customer-app
logging:
  level:
    org.springframework.web:  DEBUG
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: "*"



step 4: configure product service
__________________________________

1. create spring boot project : devtools, actuator, eureka client 
2. apply annotation : @EnableEurekaClient on client main bootstrap class

yml configuration:
__________________
server:
  servlet:
    context-path: /productapp
  port: 8082
spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://localhost:3306/infy_exp1?useSSL=false
    driver-class-name: com.mysql.jdbc.Driver
  jpa:
    generate-ddl: true
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate: format_sql=true
  application:
    name: product-app
logging:
  level:
    org.springframework.web:  DEBUG
    org.hibernate: ERROR
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: "*"



step 4: configure order service
__________________________________

1. create spring boot project : devtools, actuator, eureka client 
2. apply annotation : @EnableEurekaClient on client main bootstrap class

yml configuration:
__________________

server:
  servlet:
    context-path: /orderapp
  port: 8080
spring:
  application:
    name: order-app
logging:
  level:
    org.springframework.web:  DEBUG
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: "*"




step 5: Replace hard coded url in : order service
__________________________________

@RestController
public class OrderController {

	@Autowired
	private RestTemplate restTemplate;
	
	@PostMapping(path = "orders")
	public ResponseEntity<Order> bookOrder( @RequestBody OrderRequest orderRequest){
		
		int customerId=orderRequest.getCid();
		int productId=orderRequest.getPid();
		int qty=orderRequest.getQty();
		String discountCoupon=orderRequest.getDiscountCoupon();
		
		//we are calling customer ms using resttemplate
		Customer customer=restTemplate
				.getForObject("http://CUSTOMER-APP/customerapp/customers/"+customerId, Customer.class);
		
		//we are calling product ms using resttemplate
		Product product=restTemplate
				.getForObject("http://PRODUCT-APP/productapp/products/"+productId, Product.class);
		
		//we are calling discount coupon ms using resttemplate
		
		Coupon coupon=restTemplate
				.getForObject("http://COUPON-APP/couponapp/coupons/"+discountCoupon, Coupon.class);
		int discountPercentage=coupon.getDiscount();
		
		double totalPriceCalculated= product.getPrice()*qty*(100-discountPercentage)/100;
		
		Order order=new Order(UUID.randomUUID().toString(), 
				totalPriceCalculated, LocalDate.now(), customer, product);
		
		return ResponseEntity.status(HttpStatus.CREATED).body(order);
	}
	
}





----------------------------------------------------

Resilence 4j: what is coupon ms is down, we want to make applicatin resilence

We need to apply circuit breaker in order ms:
_____________________________________

step 1: add dep to order ms:

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>

Step 2:

server:
  servlet:
    context-path: /orderapp
  port: 8080
spring:
  application:
    name: order-app
logging:
  level:
    org.springframework.web:  DEBUG
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      couponservice:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED


  retry:
    instances:
      userService:
        maxRetryAttempts: 5
        waitDuration: 10s








Step 3: configure fallback method 

@Service
public class CouponService {

	@Autowired
	private RestTemplate restTemplate;

	public Coupon fallbackCoupon(Exception e) {
		return new Coupon(121, "SUP02", 2, LocalDateTime.now());
	}

	@CircuitBreaker(fallbackMethod ="fallbackCoupon" , name = "couponservice")
	public Coupon getCoupon(String discountCoupon) {
		return restTemplate.getForObject("http://COUPON-APP/couponapp/coupons/" + discountCoupon, Coupon.class);
	}
}


http://localhost:8080/orderapp/actuator/health



Spring cloud gateway:
_____________________
Step 1: create spring cloud gateway with following dependencies:
	eureka client, actuator, cloud gateway, devtools

step 2: provide the configuration:

server:
  port: 8099
spring:
  application:
    name: gateway-app
  cloud:
    gateway:
      routes:
      - id: couponappId
        uri: lb://COUPON-APP
        predicates:
        - Path=/couponapp/**
        
      - id: customerappId
        uri: lb://CUSTOMER-APP
        predicates:
        - Path=/customerapp/**
        
      - id: productappId
        uri: lb://PRODUCT-APP
        predicates:
        - Path=/productapp/**
        
      - id: orderappId
        uri: lb://ORDER-APP
        predicates:
        - Path=/orderapp/**                     
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: "*"








spring cloud config server?
____________________________

https://medium.com/@ijayakantha/microservices-centralized-configuration-with-spring-cloud-f2a1f7b78cc2

Why spring cloud config server?
_______________________________

	=> in microservice model we have to configure multiple services
	=> externilization and env specific and real time mgt


	M1	---------

	M2	-------		Configuration service		-- git : local
	
	M3	-------



Spring config server + local git configuration:
______________________________________________

dep:config server, actuator
step 1: create local git config

application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/kr_jdbc?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

commit 


step 2: configure config server:
____________________________
spring.application.name=configserver
spring.cloud.config.server.git.uri=/home/raj/Desktop/config
#spring.cloud.config.server.git.clone-on-start=true
server.port=8888
spring.cloud.config.server.git.default-label=master




@EnableConfigServer
@SpringBootApplication
public class ConfigServerApplication {
}


step 3: check endpoint
_________________________

http://localhost:8888/application/default


For remote git uri:
spring.cloud.config.server.git.uri=https://github.com/rgupta00/config_server




Configure config client:
_______________________
dependencies: web, config client, actuator, devtools


configuration client application.properties
__________________________________________

management.endpoints.web.exposure.include=*
spring.config.import=configserver:http://localhost:8888
#spring.application.name=client-app

@RestController
public class Hello {

	@Value("${spring.datasource.url: default value}")
	private String url;
	
	@GetMapping("/")
	public String sayHello() {
		return url;
	}
}



Refreshing properties at run time:
________________________________

	=> we need to register refresh hook to the client
	=> dont forget to enable managment endpoints in client

Step 1:
_______

@RefreshScope
@RestController
public class Hello {

	@Value("${spring.datasource.url: default value}")
	private String url;
	
	@GetMapping("/")
	public String sayHello() {
		return url;
	}
}

step 2: chnage configuration and commit

step 3: in client application use refresh endpoint

http://localhost:8080/actuator/refresh




consul tutorial:
________________
	=> Consul is a free and open-source service networking platform developed by HashiCorp

	=> Consul was initially released in 2014 as a service discovery platform. 
	In addition to service discovery, it now provides a full-featured service mesh for secure service 
	segmentation across any cloud or runtime environment, and distributed key-value storage for application configuration.

	=> Consul is a distributed, highly available, datacenter-aware, service discovery and configuration system. 
	It can be used to present services and nodes in a flexible and powerful interface that allows clients 
	to always have an up-to-date view of the infrastructure they are a part of.

	=> Consul provides many different features that are used to provide consistent and available information about your     	infrastructure. 

	This includes service and node discovery mechanisms, a tagging system, health checks, consensus-based election routines, 	system-wide key/value storage, and more. 


Why it is used in microservice :
________________________________
	1. for service discovery ( will replace eureka server)
	2. used for centerilized configuration ( will replae spring config server)



How to get started ?
______________________

step 1: how to download and configure
______________________________

*  downlaod it from the site:

https://www.consul.io/downloads

* run ipcoinfig to check ur ip address and run time command

Check IP : ipconfig / ifconfig
bootstrap consul : consul agent -server -bootstrap-expect=1 -data-dir=consul-data -ui -bind=192.168.49.1


check console : http://localhost:8500/ui/dc1/services 





1. for service discovery ( will replace eureka server)
+++++++++++++++++++++++++++++++++++++++++++++++++++++

Creating greeting service:
_________________________
Apply @EnableDiscoveryClient on main class


              <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-discovery</artifactId>
		</dependency>


give hello world controller


@RestController
public class GreetingController {
	@GetMapping("/greeting")
	public String getMessage() {
		return "Welcome to greeting service";
	}
}


spring.application.name=greeting-service
server.port=8181
management.endpoints.web.exposure.include=*

check it working


Creating UserController service:
_________________________


@RestController
public class UserController {

	@Autowired
	private RestTemplate template;

	@GetMapping("/accessAPI")
	public String invokeGreetingService() {
		
		return template.getForObject("http://Greeting-service/greeting", String.class);
	}


}



@SpringBootApplication
@EnableDiscoveryClient
public class UserServiceApplication {

	@LoadBalanced
	@Bean
	public RestTemplate template() {
		return new RestTemplate();
	}
	

	public static void main(String[] args) {
		SpringApplication.run(UserServiceApplication.class, args);
	}
}


spring.application.name=user-service
server.port=8282
spring.main.allow-circular-references=true
management.endpoints.web.exposure.include=*


check it is working

                 <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-discovery</artifactId>
		</dependency>







2. used for centerilized configuration ( will replae spring config server)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



step 2: create spring boot application and that application take confgure from consule
______________________________
	create spring boot project : web, devtools , consul-config
	change the version as mentioned:

	choose dependency : 2.3.10.RELEASE
	spring cloud : Hoxton.SR11

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-config</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>


Step 3: configure consul for application
______________________________

spring:
  cloud:
    consul:
      config:
        fail-fast: true
      host: localhost
      port: 8500
  application:
    name: rajdemo



Step 4: create a class to load the configure information from consul
______________________________

@ConfigurationProperties(prefix="my")
public class MyConfig {
	private String username;
	private String password;
}


@RestController
@EnableConfigurationProperties(value = MyConfig.class)
public class HelloController{

	@Autowired
	private MyConfig config;

	@GetMapping("/getConfigData")
	public MyConfig getConfiguration() {
		return config;
	}
}



Step 5: configure key/value in consul
______________________________
config/rajdemo/my.username
	rgupta.mtech@gmail.com

config/rajdemo/my.password
	raj1111



Ref: how to install it on ubuntu
_______________________________
https://www.consul.io/downloads

curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install consul

just follow these step simple....







